{
  "api/ChartTools.Charter.html": {
    "href": "api/ChartTools.Charter.html",
    "title": "Class Charter | ChartTools",
    "keywords": "Class Charter Namespace ChartTools Assembly ChartTools.dll Creator of the chart public class Charter Inheritance object Charter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Icon Location of the image file to use as an icon in the Clone Hero song browser [IniKeySerializable(\"icon\")] public string? Icon { get; set; } Property Value string Name Name of the creator [ChartKeySerializable(\"Charter\")] public string? Name { get; set; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ChartTools.DesynchronizedAnchorException.html": {
    "href": "api/ChartTools.DesynchronizedAnchorException.html",
    "title": "Class DesynchronizedAnchorException | ChartTools",
    "keywords": "Class DesynchronizedAnchorException Namespace ChartTools Assembly ChartTools.dll Exception thrown when an invalid operation is performed on a desynchronized anchored Tempo. public class DesynchronizedAnchorException : Exception, ISerializable Inheritance object Exception DesynchronizedAnchorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors DesynchronizedAnchorException(TimeSpan) public DesynchronizedAnchorException(TimeSpan anchor) Parameters anchor TimeSpan DesynchronizedAnchorException(TimeSpan, string) Exception thrown when an invalid operation is performed on a desynchronized anchored Tempo. public DesynchronizedAnchorException(TimeSpan anchor, string message) Parameters anchor TimeSpan message string Properties Anchor public TimeSpan Anchor { get; } Property Value TimeSpan"
  },
  "api/ChartTools.Difficulty.html": {
    "href": "api/ChartTools.Difficulty.html",
    "title": "Enum Difficulty | ChartTools",
    "keywords": "Enum Difficulty Namespace ChartTools Assembly ChartTools.dll Difficulty levels public enum Difficulty : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Easy = 0 Easy difficulty Expert = 3 Expert difficulty Hard = 2 Hard difficulty Medium = 1 Medium difficulty"
  },
  "api/ChartTools.Drums.html": {
    "href": "api/ChartTools.Drums.html",
    "title": "Class Drums | ChartTools",
    "keywords": "Class Drums Namespace ChartTools Assembly ChartTools.dll public record Drums : Instrument<DrumsChord>, IEmptyVerifiable, IEquatable<Instrument>, IEquatable<Instrument<DrumsChord>>, IEquatable<Drums> Inheritance object Instrument Instrument<DrumsChord> Drums Implements IEmptyVerifiable IEquatable<Instrument> IEquatable<Instrument<DrumsChord>> IEquatable<Drums> Inherited Members Instrument<DrumsChord>.Easy Instrument<DrumsChord>.Medium Instrument<DrumsChord>.Hard Instrument<DrumsChord>.Expert Instrument<DrumsChord>.GetTrack(Difficulty) Instrument<DrumsChord>.CreateTrack(Difficulty) Instrument<DrumsChord>.RemoveTrack(Difficulty) Instrument<DrumsChord>.GetEasy() Instrument<DrumsChord>.GetMedium() Instrument<DrumsChord>.GetHard() Instrument<DrumsChord>.GetExpert() Instrument<DrumsChord>.GetTracks() Instrument<DrumsChord>.GetExistingTracks() Instrument<DrumsChord>.SetTrack(Track<DrumsChord>) Instrument.IsEmpty Instrument.InstrumentIdentity Instrument.InstrumentType Instrument.SpecialPhrases Instrument.GetDifficulty(InstrumentDifficultySet) Instrument.SetDifficulty(InstrumentDifficultySet, sbyte?) Instrument.ShareLocalEvents(TrackObjectSource) Instrument.ShareSpecial(TrackObjectSource) Instrument.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Instrument, float) Methods GetIdentity() protected override InstrumentIdentity GetIdentity() Returns InstrumentIdentity"
  },
  "api/ChartTools.DrumsChord.html": {
    "href": "api/ChartTools.DrumsChord.html",
    "title": "Class DrumsChord | ChartTools",
    "keywords": "Class DrumsChord Namespace ChartTools Assembly ChartTools.dll Set of notes played simultaneously by drums public class DrumsChord : LaneChord<DrumsNote, DrumsLane, DrumsChordModifiers>, IChord, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object LaneChord LaneChord<DrumsNote, DrumsLane, DrumsChordModifiers> DrumsChord Implements IChord ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members LaneChord<DrumsNote, DrumsLane, DrumsChordModifiers>.Notes LaneChord<DrumsNote, DrumsLane, DrumsChordModifiers>.Modifiers LaneChord<DrumsNote, DrumsLane, DrumsChordModifiers>.CreateNote(byte, uint) LaneChord.Position LaneChord.Notes LaneChord.CreateNote(byte, uint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) Constructors DrumsChord() public DrumsChord() DrumsChord(uint) public DrumsChord(uint position) Parameters position uint DrumsChord(uint, params DrumsLane[]) public DrumsChord(uint position, params DrumsLane[] notes) Parameters position uint notes DrumsLane[] Notes to add DrumsChord(uint, params DrumsNote[]) public DrumsChord(uint position, params DrumsNote[] notes) Parameters position uint notes DrumsNote[] Notes to add Properties OpenExclusivity Defines if open notes can be mixed with other notes for this chord type. true indicated open notes cannot be mixed. public override bool OpenExclusivity { get; } Property Value bool Methods GetNotes() protected override IReadOnlyCollection<LaneNote> GetNotes() Returns IReadOnlyCollection<LaneNote>"
  },
  "api/ChartTools.DrumsChordModifiers.html": {
    "href": "api/ChartTools.DrumsChordModifiers.html",
    "title": "Enum DrumsChordModifiers | ChartTools",
    "keywords": "Enum DrumsChordModifiers Namespace ChartTools Assembly ChartTools.dll Modifier that affects the way the chord can be played [Flags] public enum DrumsChordModifiers : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Accent = 1 Unsupported Flam = 4 Ghost = 2 Unsupported None = 0 No modifier"
  },
  "api/ChartTools.DrumsLane.html": {
    "href": "api/ChartTools.DrumsLane.html",
    "title": "Enum DrumsLane | ChartTools",
    "keywords": "Enum DrumsLane Namespace ChartTools Assembly ChartTools.dll Drums pads and pedals for a DrumsNote public enum DrumsLane : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Blue = 3 Blue pad DoubleKick = 6 Kick that only appears when playing with multiple pedals Green4Lane_Orange5Lane = 4 Green when playing with four pads, orange when playing with five pads Green5Lane = 5 Green when playing with five pad, otherwise converted to Green4Lane_Orange5Lane Kick = 0 Kick note, shown as a purple line Red = 1 Red pad Yellow = 2 Yellow pad"
  },
  "api/ChartTools.DrumsNote.html": {
    "href": "api/ChartTools.DrumsNote.html",
    "title": "Class DrumsNote | ChartTools",
    "keywords": "Class DrumsNote Namespace ChartTools Assembly ChartTools.dll Note played by drums public class DrumsNote : LaneNote<DrumsLane>, INote, ILongObject, IReadOnlyLongObject Inheritance object LaneNote LaneNote<DrumsLane> DrumsNote Implements INote ILongObject IReadOnlyLongObject Inherited Members LaneNote<DrumsLane>.Index LaneNote<DrumsLane>.Lane LaneNote.Sustain object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ILongObject, float) Constructors DrumsNote() public DrumsNote() DrumsNote(DrumsLane) public DrumsNote(DrumsLane lane) Parameters lane DrumsLane Properties IsCymbal true if the cymbal must be hit instead of the pad on supported drum sets public bool IsCymbal { get; set; } Property Value bool Remarks Green5Lane notes cannot be cymbal. IsKick Determines if the note is played by kicking public bool IsKick { get; } Property Value bool"
  },
  "api/ChartTools.Events.Event.html": {
    "href": "api/ChartTools.Events.Event.html",
    "title": "Class Event | ChartTools",
    "keywords": "Class Event Namespace ChartTools.Events Assembly ChartTools.dll Marker that defines an occurrence at a given point in a song. public abstract class Event : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object Event Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Derived GlobalEvent LocalEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ITrackObject, float) Constructors Event(uint, string) public Event(uint position, string data) Parameters position uint data string Event(uint, string, string?) public Event(uint position, string type, string? argument) Parameters position uint type string argument string Properties Argument Additional data to modify the outcome of the event public string? Argument { get; set; } Property Value string Remarks A lack of argument is represented as an empty string. EventData Combined event type and arguments where the first word is the type. public string EventData { get; set; } Property Value string EventType Type of event as it is written in the file public string EventType { get; set; } Property Value string Position Tick number on the track. public uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution. ToggleState public bool? ToggleState { get; } Property Value bool? Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ChartTools.Events.EventArgumentHelper.Global.Lighting.html": {
    "href": "api/ChartTools.Events.EventArgumentHelper.Global.Lighting.html",
    "title": "Class EventArgumentHelper.Global.Lighting | ChartTools",
    "keywords": "Class EventArgumentHelper.Global.Lighting Namespace ChartTools.Events Assembly ChartTools.dll public static class EventArgumentHelper.Global.Lighting Inheritance object EventArgumentHelper.Global.Lighting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Blackout public const string Blackout = \"(blackout)\" Field Value string Chase public const string Chase = \"(chase)\" Field Value string Color1 public const string Color1 = \"(color1)\" Field Value string Color2 public const string Color2 = \"(color2)\" Field Value string Flare public const string Flare = \"(flare)\" Field Value string Strobe public const string Strobe = \"(strobe)\" Field Value string Sweep public const string Sweep = \"(sweep)\" Field Value string"
  },
  "api/ChartTools.Events.EventArgumentHelper.Global.html": {
    "href": "api/ChartTools.Events.EventArgumentHelper.Global.html",
    "title": "Class EventArgumentHelper.Global | ChartTools",
    "keywords": "Class EventArgumentHelper.Global Namespace ChartTools.Events Assembly ChartTools.dll public static class EventArgumentHelper.Global Inheritance object EventArgumentHelper.Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChartTools.Events.EventArgumentHelper.html": {
    "href": "api/ChartTools.Events.EventArgumentHelper.html",
    "title": "Class EventArgumentHelper | ChartTools",
    "keywords": "Class EventArgumentHelper Namespace ChartTools.Events Assembly ChartTools.dll public class EventArgumentHelper Inheritance object EventArgumentHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.Events.EventExtensions.html": {
    "href": "api/ChartTools.Events.EventExtensions.html",
    "title": "Class EventExtensions | ChartTools",
    "keywords": "Class EventExtensions Namespace ChartTools.Events Assembly ChartTools.dll Provides additional methods for events. public static class EventExtensions Inheritance object EventExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLyrics(IEnumerable<GlobalEvent>) Gets the lyrics from an enumerable of GlobalEvent public static IEnumerable<Phrase> GetLyrics(this IEnumerable<GlobalEvent> globalEvents) Parameters globalEvents IEnumerable<GlobalEvent> Returns IEnumerable<Phrase> Enumerable of Phrase SetLyrics(IEnumerable<GlobalEvent>, IEnumerable<Phrase>) Gets a set of GlobalEvent where phrase and lyric events are replaced with the events making up a set of Phrase. public static IEnumerable<GlobalEvent> SetLyrics(this IEnumerable<GlobalEvent> events, IEnumerable<Phrase> lyrics) Parameters events IEnumerable<GlobalEvent> lyrics IEnumerable<Phrase> Returns IEnumerable<GlobalEvent> Enumerable of GlobalEvent ToFile(IEnumerable<GlobalEvent>, string) public static void ToFile(this IEnumerable<GlobalEvent> events, string path) Parameters events IEnumerable<GlobalEvent> path string ToFileAsync(IEnumerable<GlobalEvent>, string, CancellationToken) public static Task ToFileAsync(this IEnumerable<GlobalEvent> events, string path, CancellationToken cancellationToken) Parameters events IEnumerable<GlobalEvent> path string cancellationToken CancellationToken Returns Task"
  },
  "api/ChartTools.Events.EventTypeHeaderHelper.Global.html": {
    "href": "api/ChartTools.Events.EventTypeHeaderHelper.Global.html",
    "title": "Class EventTypeHeaderHelper.Global | ChartTools",
    "keywords": "Class EventTypeHeaderHelper.Global Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHeaderHelper.Global Inheritance object EventTypeHeaderHelper.Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BassistMovement public const string BassistMovement = \"bass_\" Field Value string Crowd public const string Crowd = \"crowd_\" Field Value string DrummerMovement public const string DrummerMovement = \"drum_\" Field Value string GuitaristMovement public const string GuitaristMovement = \"gtr_\" Field Value string GuitaristSolo public const string GuitaristSolo = \"solo_\" Field Value string GuitaristWail public const string GuitaristWail = \"wail_\" Field Value string KeyboardMovement public const string KeyboardMovement = \"keys_\" Field Value string Phrase public const string Phrase = \"phrase_\" Field Value string SingerMovement public const string SingerMovement = \"sing_\" Field Value string Sync public const string Sync = \"sync_\" Field Value string"
  },
  "api/ChartTools.Events.EventTypeHeaderHelper.Local.html": {
    "href": "api/ChartTools.Events.EventTypeHeaderHelper.Local.html",
    "title": "Class EventTypeHeaderHelper.Local | ChartTools",
    "keywords": "Class EventTypeHeaderHelper.Local Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHeaderHelper.Local Inheritance object EventTypeHeaderHelper.Local Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GHL6 public const string GHL6 = \"ghl_6\" Field Value string OwFace public const string OwFace = \"ow_face_\" Field Value string"
  },
  "api/ChartTools.Events.EventTypeHeaderHelper.html": {
    "href": "api/ChartTools.Events.EventTypeHeaderHelper.html",
    "title": "Class EventTypeHeaderHelper | ChartTools",
    "keywords": "Class EventTypeHeaderHelper Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHeaderHelper Inheritance object EventTypeHeaderHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChartTools.Events.EventTypeHelper.Common.html": {
    "href": "api/ChartTools.Events.EventTypeHelper.Common.html",
    "title": "Class EventTypeHelper.Common | ChartTools",
    "keywords": "Class EventTypeHelper.Common Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHelper.Common Inheritance object EventTypeHelper.Common Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ToggleOff public const string ToggleOff = \"off\" Field Value string ToggleOn public const string ToggleOn = \"on\" Field Value string"
  },
  "api/ChartTools.Events.EventTypeHelper.Global.html": {
    "href": "api/ChartTools.Events.EventTypeHelper.Global.html",
    "title": "Class EventTypeHelper.Global | ChartTools",
    "keywords": "Class EventTypeHelper.Global Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHelper.Global Inheritance object EventTypeHelper.Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BandJump public const string BandJump = \"band_jump\" Field Value string BassistIdle public const string BassistIdle = \"bass_off\" Field Value string BassistMove public const string BassistMove = \"bass_on\" Field Value string Chorus public const string Chorus = \"chorus\" Field Value string CrowdDoubleTempo public const string CrowdDoubleTempo = \"crowd_double_tempo\" Field Value string CrowdHalfTempo public const string CrowdHalfTempo = \"crowd_half_tempo\" Field Value string CrowdLightersFast public const string CrowdLightersFast = \"crowd_lighters_fast\" Field Value string CrowdLightersOff public const string CrowdLightersOff = \"crowd_lighters_off\" Field Value string CrowdLightersSlow public const string CrowdLightersSlow = \"crowd_lighters_slow\" Field Value string CrowdNormalTempo public const string CrowdNormalTempo = \"crowd_normal_tempo\" Field Value string DrummerAll public const string DrummerAll = \"drum_allbeat\" Field Value string DrummerDouble public const string DrummerDouble = \"drum_double\" Field Value string DrummerHalf public const string DrummerHalf = \"drum_half\" Field Value string DrummerIdle public const string DrummerIdle = \"drum_off\" Field Value string DrummerMove public const string DrummerMove = \"drum_on\" Field Value string End public const string End = \"end\" Field Value string GuitaristIdle public const string GuitaristIdle = \"gtr_off\" Field Value string GuitaristMove public const string GuitaristMove = \"gtr_on\" Field Value string GuitaristSoloOff public const string GuitaristSoloOff = \"solo_off\" Field Value string GuitaristSoloOn public const string GuitaristSoloOn = \"solo_on\" Field Value string GuitaristWailOff public const string GuitaristWailOff = \"wail_off\" Field Value string GuitaristWailOn public const string GuitaristWailOn = \"wail_on\" Field Value string HalfTempo public const string HalfTempo = \"half_tempo\" Field Value string Idle public const string Idle = \"idle\" Field Value string KeyboardIdle public const string KeyboardIdle = \"sing_off\" Field Value string KeyboardMove public const string KeyboardMove = \"sing_on\" Field Value string Lighting public const string Lighting = \"lighting\" Field Value string Lyric public const string Lyric = \"lyric\" Field Value string MusicStart public const string MusicStart = \"music_start\" Field Value string NotrmalTempo public const string NotrmalTempo = \"normal_tempo\" Field Value string PhraseEnd public const string PhraseEnd = \"phrase_end\" Field Value string PhraseStart public const string PhraseStart = \"phrase_start\" Field Value string Play public const string Play = \"play\" Field Value string RB2CHSection public const string RB2CHSection = \"section\" Field Value string RB3Section public const string RB3Section = \"prc_\" Field Value string SingerIdle public const string SingerIdle = \"sing_off\" Field Value string SingerMove public const string SingerMove = \"sing_on\" Field Value string SyncHeadBang public const string SyncHeadBang = \"sync_head_bang\" Field Value string SyncWag public const string SyncWag = \"sync_wag\" Field Value string Verse public const string Verse = \"verse\" Field Value string"
  },
  "api/ChartTools.Events.EventTypeHelper.Local.html": {
    "href": "api/ChartTools.Events.EventTypeHelper.Local.html",
    "title": "Class EventTypeHelper.Local | ChartTools",
    "keywords": "Class EventTypeHelper.Local Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHelper.Local Inheritance object EventTypeHelper.Local Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GHL6 public const string GHL6 = \"ghl_6\" Field Value string GHL6Forced public const string GHL6Forced = \"ghl_6_forced\" Field Value string OwFaceOff public const string OwFaceOff = \"ow_face_off\" Field Value string OwFaceOn public const string OwFaceOn = \"ow_face_on\" Field Value string Solo public const string Solo = \"solo\" Field Value string SoloEnd public const string SoloEnd = \"soloend\" Field Value string"
  },
  "api/ChartTools.Events.EventTypeHelper.html": {
    "href": "api/ChartTools.Events.EventTypeHelper.html",
    "title": "Class EventTypeHelper | ChartTools",
    "keywords": "Class EventTypeHelper Namespace ChartTools.Events Assembly ChartTools.dll public static class EventTypeHelper Inheritance object EventTypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChartTools.Events.GlobalEvent.html": {
    "href": "api/ChartTools.Events.GlobalEvent.html",
    "title": "Class GlobalEvent | ChartTools",
    "keywords": "Class GlobalEvent Namespace ChartTools.Events Assembly ChartTools.dll Event common to all instruments public class GlobalEvent : Event, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object Event GlobalEvent Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members Event.Position Event.EventType Event.Argument Event.EventData Event.ToggleState Event.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ITrackObject, float) Constructors GlobalEvent(uint, string) public GlobalEvent(uint position, string data) Parameters position uint data string GlobalEvent(uint, string, string?) public GlobalEvent(uint position, string type, string? argument = null) Parameters position uint type string argument string Properties IsBassistMovementEvent public bool IsBassistMovementEvent { get; } Property Value bool IsCrowdEvent public bool IsCrowdEvent { get; } Property Value bool IsDrummerMovementEvent public bool IsDrummerMovementEvent { get; } Property Value bool IsGuitaristMovementEvent public bool IsGuitaristMovementEvent { get; } Property Value bool IsGuitaristSoloEvent public bool IsGuitaristSoloEvent { get; } Property Value bool IsKeyboardMovementEvent public bool IsKeyboardMovementEvent { get; } Property Value bool IsLyricEvent public bool IsLyricEvent { get; } Property Value bool IsPhraseEvent public bool IsPhraseEvent { get; } Property Value bool IsSectionEvent public bool IsSectionEvent { get; } Property Value bool IsSyncEvent public bool IsSyncEvent { get; } Property Value bool IsWailEvent public bool IsWailEvent { get; } Property Value bool Methods FromFile(string) Reads global events from a file. public static IEnumerable<GlobalEvent> FromFile(string path) Parameters path string Path of the file Returns IEnumerable<GlobalEvent> FromFileAsync(string, CancellationToken) Reads global events from a file asynchronously using multitasking. public static Task<List<GlobalEvent>> FromFileAsync(string path, CancellationToken cancellationToken) Parameters path string Path of the file cancellationToken CancellationToken Token to request cancellation Returns Task<List<GlobalEvent>>"
  },
  "api/ChartTools.Events.LocalEvent.html": {
    "href": "api/ChartTools.Events.LocalEvent.html",
    "title": "Class LocalEvent | ChartTools",
    "keywords": "Class LocalEvent Namespace ChartTools.Events Assembly ChartTools.dll Event specific to an instrument and difficulty public class LocalEvent : Event, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object Event LocalEvent Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members Event.Position Event.EventType Event.Argument Event.EventData Event.ToggleState Event.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ITrackObject, float) Constructors LocalEvent(uint, string) public LocalEvent(uint position, string data) Parameters position uint data string LocalEvent(uint, string, string?) public LocalEvent(uint position, string type, string? argument = null) Parameters position uint type string argument string Properties IsOwFaceEvent public bool IsOwFaceEvent { get; } Property Value bool IsSoloEvent public bool IsSoloEvent { get; } Property Value bool"
  },
  "api/ChartTools.Events.html": {
    "href": "api/ChartTools.Events.html",
    "title": "Namespace ChartTools.Events | ChartTools",
    "keywords": "Namespace ChartTools.Events Classes Event Marker that defines an occurrence at a given point in a song. EventArgumentHelper EventArgumentHelper.Global EventArgumentHelper.Global.Lighting EventExtensions Provides additional methods for events. EventTypeHeaderHelper EventTypeHeaderHelper.Global EventTypeHeaderHelper.Local EventTypeHelper EventTypeHelper.Common EventTypeHelper.Global EventTypeHelper.Local GlobalEvent Event common to all instruments LocalEvent Event specific to an instrument and difficulty"
  },
  "api/ChartTools.Extensions.Collections.Alternating.OrderedAlternatingEnumerable-2.html": {
    "href": "api/ChartTools.Extensions.Collections.Alternating.OrderedAlternatingEnumerable-2.html",
    "title": "Class OrderedAlternatingEnumerable<T, TKey> | ChartTools",
    "keywords": "Class OrderedAlternatingEnumerable<T, TKey> Namespace ChartTools.Extensions.Collections.Alternating Assembly ChartTools.dll Enumerable where T items are pulled from a set of enumerables in order using a TKey key public class OrderedAlternatingEnumerable<T, TKey> : IEnumerable<T>, IEnumerable where TKey : IComparable<TKey> Type Parameters T Type of the enumerated items TKey Type of the key used to determine the order Inheritance object OrderedAlternatingEnumerable<T, TKey> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors OrderedAlternatingEnumerable(Func<T, TKey>, params IEnumerable<T>?[]) Creates an instance of OrderedAlternatingEnumerable<T, TKey>. public OrderedAlternatingEnumerable(Func<T, TKey> keyGetter, params IEnumerable<T>?[] enumerables) Parameters keyGetter Func<T, TKey> Method that retrieves the key from an item enumerables IEnumerable<T>[] Enumerables to alternate between Exceptions ArgumentException ArgumentNullException Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection."
  },
  "api/ChartTools.Extensions.Collections.Alternating.SerialAlternatingEnumerable-1.html": {
    "href": "api/ChartTools.Extensions.Collections.Alternating.SerialAlternatingEnumerable-1.html",
    "title": "Class SerialAlternatingEnumerable<T> | ChartTools",
    "keywords": "Class SerialAlternatingEnumerable<T> Namespace ChartTools.Extensions.Collections.Alternating Assembly ChartTools.dll Enumerable where T items are yielded by alternating from a set of enumerables public class SerialAlternatingEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters T Type of the enumerated items Inheritance object SerialAlternatingEnumerable<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors SerialAlternatingEnumerable(params IEnumerable<T>?[]) Creates an instance of SerialAlternatingEnumerable<T> public SerialAlternatingEnumerable(params IEnumerable<T>?[] enumerables) Parameters enumerables IEnumerable<T>[] Enumerables to pull items from Exceptions ArgumentException ArgumentNullException Properties Enumerables protected IEnumerable<T>[] Enumerables { get; } Property Value IEnumerable<T>[] Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection."
  },
  "api/ChartTools.Extensions.Collections.Alternating.html": {
    "href": "api/ChartTools.Extensions.Collections.Alternating.html",
    "title": "Namespace ChartTools.Extensions.Collections.Alternating | ChartTools",
    "keywords": "Namespace ChartTools.Extensions.Collections.Alternating Classes OrderedAlternatingEnumerable<T, TKey> Enumerable where T items are pulled from a set of enumerables in order using a TKey key SerialAlternatingEnumerable<T> Enumerable where T items are yielded by alternating from a set of enumerables"
  },
  "api/ChartTools.Extensions.Collections.DelayedEnumerable-1.html": {
    "href": "api/ChartTools.Extensions.Collections.DelayedEnumerable-1.html",
    "title": "Class DelayedEnumerable<T> | ChartTools",
    "keywords": "Class DelayedEnumerable<T> Namespace ChartTools.Extensions.Collections Assembly ChartTools.dll public class DelayedEnumerable<T> : IEnumerable<T>, IEnumerable, IDisposable Type Parameters T Inheritance object DelayedEnumerable<T> Implements IEnumerable<T> IEnumerable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Properties AwaitingItems true if there are more items to be received public bool AwaitingItems { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EnumerateSynchronously() public IEnumerable<T> EnumerateSynchronously() Returns IEnumerable<T> GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection."
  },
  "api/ChartTools.Extensions.Collections.DelayedEnumerableSource-1.html": {
    "href": "api/ChartTools.Extensions.Collections.DelayedEnumerableSource-1.html",
    "title": "Class DelayedEnumerableSource<T> | ChartTools",
    "keywords": "Class DelayedEnumerableSource<T> Namespace ChartTools.Extensions.Collections Assembly ChartTools.dll public class DelayedEnumerableSource<T> : IDisposable Type Parameters T Inheritance object DelayedEnumerableSource<T> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors DelayedEnumerableSource() public DelayedEnumerableSource() Properties AwaitingItems public bool AwaitingItems { get; } Property Value bool Buffer public ConcurrentQueue<T> Buffer { get; } Property Value ConcurrentQueue<T> Enumerable public DelayedEnumerable<T> Enumerable { get; } Property Value DelayedEnumerable<T> Methods Add(T) public void Add(T item) Parameters item T Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool EndAwait() public void EndAwait() ~DelayedEnumerableSource() protected ~DelayedEnumerableSource()"
  },
  "api/ChartTools.Extensions.Collections.IInitializable.html": {
    "href": "api/ChartTools.Extensions.Collections.IInitializable.html",
    "title": "Interface IInitializable | ChartTools",
    "keywords": "Interface IInitializable Namespace ChartTools.Extensions.Collections Assembly ChartTools.dll Defines an object that can be initialized public interface IInitializable Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Initialized Has already been initialized bool Initialized { get; } Property Value bool Methods Initialize() Does required initialization if not already done. bool Initialize() Returns bool true if the object was not initialized prior to calling."
  },
  "api/ChartTools.Extensions.Collections.UniqueTrackObjectCollection-1.html": {
    "href": "api/ChartTools.Extensions.Collections.UniqueTrackObjectCollection-1.html",
    "title": "Class UniqueTrackObjectCollection<T> | ChartTools",
    "keywords": "Class UniqueTrackObjectCollection<T> Namespace ChartTools.Extensions.Collections Assembly ChartTools.dll Set of track objects where each one must have a different position public class UniqueTrackObjectCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : ITrackObject Type Parameters T Inheritance object UniqueTrackObjectCollection<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors UniqueTrackObjectCollection(IEnumerable<T>?) public UniqueTrackObjectCollection(IEnumerable<T>? items = null) Parameters items IEnumerable<T> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. Methods Add(T) Adds an item to the ICollection<T>. public void Add(T item) Parameters item T The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(T item) Parameters item T The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only."
  },
  "api/ChartTools.Extensions.Collections.html": {
    "href": "api/ChartTools.Extensions.Collections.html",
    "title": "Namespace ChartTools.Extensions.Collections | ChartTools",
    "keywords": "Namespace ChartTools.Extensions.Collections Classes DelayedEnumerableSource<T> DelayedEnumerable<T> UniqueTrackObjectCollection<T> Set of track objects where each one must have a different position Interfaces IInitializable Defines an object that can be initialized"
  },
  "api/ChartTools.Extensions.EqualityComparison-1.html": {
    "href": "api/ChartTools.Extensions.EqualityComparison-1.html",
    "title": "Delegate EqualityComparison<T> | ChartTools",
    "keywords": "Delegate EqualityComparison<T> Namespace ChartTools.Extensions Assembly ChartTools.dll IEquatable<T> equivalent to the IComparable<T> Comparison<T> delegate public delegate bool EqualityComparison<in T>(T a, T b) Parameters a T b T Returns bool Type Parameters T Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.Extensions.FuncEqualityComparer-1.html": {
    "href": "api/ChartTools.Extensions.FuncEqualityComparer-1.html",
    "title": "Class FuncEqualityComparer<T> | ChartTools",
    "keywords": "Class FuncEqualityComparer<T> Namespace ChartTools.Extensions Assembly ChartTools.dll Delegate-based IEqualityComparer<T> public class FuncEqualityComparer<T> : IEqualityComparer<T> Type Parameters T Inheritance object FuncEqualityComparer<T> Implements IEqualityComparer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors FuncEqualityComparer(EqualityComparison<T?>) Creates a new instance. public FuncEqualityComparer(EqualityComparison<T?> comparison) Parameters comparison EqualityComparison<T> Method used to compare two objects Properties Comparison Method used to compare two objects public EqualityComparison<T?> Comparison { get; } Property Value EqualityComparison<T> Methods Equals(T?, T?) Determines whether the specified objects are equal. public bool Equals(T? x, T? y) Parameters x T The first object of type T to compare. y T The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(T) Returns a hash code for the specified object. public int GetHashCode(T obj) Parameters obj T The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "api/ChartTools.Extensions.IInitializable.html": {
    "href": "api/ChartTools.Extensions.IInitializable.html",
    "title": "Interface IInitializable | ChartTools",
    "keywords": "Interface IInitializable Namespace ChartTools.Extensions Assembly ChartTools.dll Defines an object that can be initialized public interface IInitializable Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Initialized Has already been initialized bool Initialized { get; } Property Value bool Methods Initialize() Does required initialization if not already done. bool Initialize() Returns bool true if the object was not initialized prior to calling."
  },
  "api/ChartTools.Extensions.Linq.CollectionExtensions.html": {
    "href": "api/ChartTools.Extensions.Linq.CollectionExtensions.html",
    "title": "Class CollectionExtensions | ChartTools",
    "keywords": "Class CollectionExtensions Namespace ChartTools.Extensions.Linq Assembly ChartTools.dll public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BinarySearchIndex<T>(IList<T>, T, out bool) public static int BinarySearchIndex<T>(this IList<T> source, T target, out bool exactMatch) where T : notnull, IComparable<T> Parameters source IList<T> target T exactMatch bool Returns int Type Parameters T BinarySearchIndex<T, TKey>(IList<T>, TKey, Func<T, TKey>, out bool) public static int BinarySearchIndex<T, TKey>(this IList<T> source, TKey target, Func<T, TKey> keySelector, out bool exactMatch) where TKey : notnull, IComparable<TKey> Parameters source IList<T> target TKey keySelector Func<T, TKey> exactMatch bool Returns int Type Parameters T TKey RemoveWhere<T>(ICollection<T>, Predicate<T>) Removes all items in a ICollection<T> that meet a condition public static void RemoveWhere<T>(this ICollection<T> source, Predicate<T> predicate) Parameters source ICollection<T> Collection to remove items from predicate Predicate<T> Function that determines which items to remove Type Parameters T"
  },
  "api/ChartTools.Extensions.Linq.EnumerableExtensions.html": {
    "href": "api/ChartTools.Extensions.Linq.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | ChartTools",
    "keywords": "Class EnumerableExtensions Namespace ChartTools.Extensions.Linq Assembly ChartTools.dll public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods All(IEnumerable<bool>) Checks that all booleans in a collection are true. public static bool All(this IEnumerable<bool> source) Parameters source IEnumerable<bool> Source of booleans Returns bool true if all booleans are true or the collection is empty AlternateBy<T, TKey>(IEnumerable<IEnumerable<T>>, Func<T, TKey>) public static IEnumerable<T> AlternateBy<T, TKey>(this IEnumerable<IEnumerable<T>> source, Func<T, TKey> selector) where TKey : IComparable<TKey> Parameters source IEnumerable<IEnumerable<T>> selector Func<T, TKey> Returns IEnumerable<T> Type Parameters T TKey Alternate<T>(IEnumerable<IEnumerable<T>>) public static IEnumerable<T> Alternate<T>(this IEnumerable<IEnumerable<T>> source) Parameters source IEnumerable<IEnumerable<T>> Returns IEnumerable<T> Type Parameters T Any(IEnumerable<bool>) Checks if any boolean in a collection is true. public static bool Any(this IEnumerable<bool> source) Parameters source IEnumerable<bool> Source of booleans Returns bool Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) Returns distinct elements of a sequence using a method to determine the equality of elements public static IEnumerable<T> Distinct<T>(this IEnumerable<T> source, EqualityComparison<T?> comparison) Parameters source IEnumerable<T> comparison EqualityComparison<T> Method that determines if two elements are the same Returns IEnumerable<T> Type Parameters T FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) Returns the first element of the sequence that satisfies a condition or a default value if no such element is found. public static T? FirstOrDefault<T>(this IEnumerable<T> source, Predicate<T> predicate, T? defaultValue, out bool returnedDefault) Parameters source IEnumerable<T> An IEnumerable<T> to return an element from. predicate Predicate<T> A function to test each element for a condition. defaultValue T returnedDefault bool true if no items meeting the condition were found Returns T default(TSource) if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate. Type Parameters T Exceptions ArgumentNullException source or predicate is null. ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) Finds the items for which a function returns the greatest value. public static IEnumerable<T> ManyMaxBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector) where TKey : IComparable<TKey> Parameters source IEnumerable<T> Items to find the minimum or maximum of selector Func<T, TKey> Function that gets the key to use in the comparison from an item Returns IEnumerable<T> Type Parameters T TKey ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) Finds the items for which a function returns the smallest value. public static IEnumerable<T> ManyMinBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector) where TKey : IComparable<TKey> Parameters source IEnumerable<T> Items to find the minimum or maximum of selector Func<T, TKey> Function that gets the key to use in the comparison from an item Returns IEnumerable<T> Type Parameters T TKey NonNull<T>(IEnumerable<T?>) public static IEnumerable<T> NonNull<T>(this IEnumerable<T?> source) where T : struct Parameters source IEnumerable<T?> Returns IEnumerable<T> Type Parameters T NonNull<T>(IEnumerable<T?>) Excludes null items. public static IEnumerable<T> NonNull<T>(this IEnumerable<T?> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T RelativeLoopSkipFirst<T>(IEnumerable<T>) public static IEnumerable<(T previous, T current)> RelativeLoopSkipFirst<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<(T previous, T current)> Type Parameters T RelativeLoop<T>(IEnumerable<T>, T?) Loops through a set of objects and returns a set of tuples containing the current object and the previous one. public static IEnumerable<(T? previous, T current)> RelativeLoop<T>(this IEnumerable<T> source, T? firstPrevious = default) Parameters source IEnumerable<T> Items to loop through firstPrevious T Value of the previous item in the first call of the action Returns IEnumerable<(T previous, T current)> Type Parameters T RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) Removes a section of items. public static IEnumerable<T> RemoveSection<T>(this IEnumerable<T> source, Predicate<T> startRemove, Predicate<T> endRemove) Parameters source IEnumerable<T> Source items to remove a section of startRemove Predicate<T> Function that determines the start of the section to replace endRemove Predicate<T> Function that determines the end of the section to replace Returns IEnumerable<T> Type Parameters T Remarks Items that match startRemove or endRemove ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) Replaces a section with other items. public static IEnumerable<T> ReplaceSection<T>(this IEnumerable<T> source, SectionReplacement<T> replacement) Parameters source IEnumerable<T> Items to replace a section in replacement SectionReplacement<T> Returns IEnumerable<T> Type Parameters T Remarks Items that match startReplace or endReplace are not included in the returned items. ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) Replaces multiple sections of items. public static IEnumerable<T> ReplaceSections<T>(this IEnumerable<T> source, IEnumerable<SectionReplacement<T>> replacements) Parameters source IEnumerable<T> Items to replace sections in replacements IEnumerable<SectionReplacement<T>> Returns IEnumerable<T> Type Parameters T Remarks Items that match startReplace or endReplace are not included in the returned items. Replace<T>(IEnumerable<T>, Predicate<T>, T) Replaces items that meet a condition with another item. public static IEnumerable<T> Replace<T>(this IEnumerable<T> source, Predicate<T> predicate, T replacement) Parameters source IEnumerable<T> The IEnumerable<out T> to replace the items of predicate Predicate<T> A function that determines if an item must be replaced replacement T The item to replace items with Returns IEnumerable<T> Type Parameters T ToAsyncEnumerable<T>(IEnumerable<T>) public static IAsyncEnumerable<T> ToAsyncEnumerable<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IAsyncEnumerable<T> Type Parameters T TryGetFirstOfType<TResult>(IEnumerable, out TResult) Tries to get the first item of a given type in a collection. public static bool TryGetFirstOfType<TResult>(this IEnumerable source, out TResult result) Parameters source IEnumerable Source of items result TResult Found item Returns bool true if an item was found Type Parameters TResult TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) Tries to get the first item that meet a condition from en enumerable. public static bool TryGetFirst<T>(this IEnumerable<T> source, Predicate<T> predicate, out T item) Parameters source IEnumerable<T> predicate Predicate<T> Method that returns true if a given item meets the condition item T Found item Returns bool true if an item was found Type Parameters T TryGetFirst<T>(IEnumerable<T>, out T) Tries to get the first element of a collection. public static bool TryGetFirst<T>(this IEnumerable<T> source, out T result) Parameters source IEnumerable<T> Source of items result T Found item Returns bool true if an item was found Type Parameters T UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) public static bool UniqueBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector) Parameters source IEnumerable<T> selector Func<T, TKey> Returns bool Type Parameters T TKey Unique<T>(IEnumerable<T>) public static bool Unique<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns bool Type Parameters T"
  },
  "api/ChartTools.Extensions.Linq.SectionReplacement-1.html": {
    "href": "api/ChartTools.Extensions.Linq.SectionReplacement-1.html",
    "title": "Struct SectionReplacement<T> | ChartTools",
    "keywords": "Struct SectionReplacement<T> Namespace ChartTools.Extensions.Linq Assembly ChartTools.dll Replacement for a section of items in a collection public readonly record struct SectionReplacement<T> : IEquatable<SectionReplacement<T>> Type Parameters T Implements IEquatable<SectionReplacement<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors SectionReplacement(IEnumerable<T>, Predicate<T>, Predicate<T>, bool) Replacement for a section of items in a collection public SectionReplacement(IEnumerable<T> Replacement, Predicate<T> StartReplace, Predicate<T> EndReplace, bool AddIfMissing) Parameters Replacement IEnumerable<T> Items to replace with StartReplace Predicate<T> Method that defines if a source marks the start of the section to replace EndReplace Predicate<T> Method that defines if a source item marks the end of the section to replace AddIfMissing bool The replacement should be appended to the collection if the section to replace is not found Properties AddIfMissing The replacement should be appended to the collection if the section to replace is not found public bool AddIfMissing { get; init; } Property Value bool EndReplace Method that defines if a source item marks the end of the section to replace public Predicate<T> EndReplace { get; init; } Property Value Predicate<T> Replacement Items to replace with public IEnumerable<T> Replacement { get; init; } Property Value IEnumerable<T> StartReplace Method that defines if a source marks the start of the section to replace public Predicate<T> StartReplace { get; init; } Property Value Predicate<T>"
  },
  "api/ChartTools.Extensions.Linq.html": {
    "href": "api/ChartTools.Extensions.Linq.html",
    "title": "Namespace ChartTools.Extensions.Linq | ChartTools",
    "keywords": "Namespace ChartTools.Extensions.Linq Classes CollectionExtensions EnumerableExtensions Structs SectionReplacement<T> Replacement for a section of items in a collection"
  },
  "api/ChartTools.Extensions.html": {
    "href": "api/ChartTools.Extensions.html",
    "title": "Namespace ChartTools.Extensions | ChartTools",
    "keywords": "Namespace ChartTools.Extensions Classes FuncEqualityComparer<T> Delegate-based IEqualityComparer<T> Interfaces IInitializable Defines an object that can be initialized Delegates EqualityComparison<T> IEquatable<T> equivalent to the IComparable<T> Comparison<T> delegate"
  },
  "api/ChartTools.FileType.html": {
    "href": "api/ChartTools.FileType.html",
    "title": "Enum FileType | ChartTools",
    "keywords": "Enum FileType Namespace ChartTools Assembly ChartTools.dll public enum FileType : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Chart = 0 Ini = 1 MIDI = 2"
  },
  "api/ChartTools.GHLChord.html": {
    "href": "api/ChartTools.GHLChord.html",
    "title": "Class GHLChord | ChartTools",
    "keywords": "Class GHLChord Namespace ChartTools Assembly ChartTools.dll Set of notes played simultaneously by a Guitar Hero Live instrument public class GHLChord : LaneChord<LaneNote<GHLLane>, GHLLane, GHLChordModifiers>, IChord, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object LaneChord LaneChord<LaneNote<GHLLane>, GHLLane, GHLChordModifiers> GHLChord Implements IChord ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members LaneChord<LaneNote<GHLLane>, GHLLane, GHLChordModifiers>.Notes LaneChord<LaneNote<GHLLane>, GHLLane, GHLChordModifiers>.Modifiers LaneChord<LaneNote<GHLLane>, GHLLane, GHLChordModifiers>.CreateNote(byte, uint) LaneChord.Position LaneChord.Notes LaneChord.CreateNote(byte, uint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) Constructors GHLChord() public GHLChord() GHLChord(uint) public GHLChord(uint position) Parameters position uint GHLChord(uint, params GHLLane[]) public GHLChord(uint position, params GHLLane[] notes) Parameters position uint notes GHLLane[] Notes to add GHLChord(uint, params LaneNote<GHLLane>[]) public GHLChord(uint position, params LaneNote<GHLLane>[] notes) Parameters position uint notes LaneNote<GHLLane>[] Notes to add Properties OpenExclusivity Defines if open notes can be mixed with other notes for this chord type. true indicated open notes cannot be mixed. public override bool OpenExclusivity { get; } Property Value bool Methods GetNotes() protected override IReadOnlyCollection<LaneNote> GetNotes() Returns IReadOnlyCollection<LaneNote>"
  },
  "api/ChartTools.GHLChordModifiers.html": {
    "href": "api/ChartTools.GHLChordModifiers.html",
    "title": "Enum GHLChordModifiers | ChartTools",
    "keywords": "Enum GHLChordModifiers Namespace ChartTools Assembly ChartTools.dll Modifier that affects how a GHLChord can be played [Flags] public enum GHLChordModifiers : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields ExplicitHopo = 1 The Hopo state is not relative to the previous chord. HopoInvert = 2 Forced Hopo if ExplicitHopo is set, otherwise inverts the natural state relative to the previous chord None = 0 No modifier Tap = 4 The chord can be played without strumming"
  },
  "api/ChartTools.GHLInstrument.html": {
    "href": "api/ChartTools.GHLInstrument.html",
    "title": "Class GHLInstrument | ChartTools",
    "keywords": "Class GHLInstrument Namespace ChartTools Assembly ChartTools.dll public record GHLInstrument : Instrument<GHLChord>, IEmptyVerifiable, IEquatable<Instrument>, IEquatable<Instrument<GHLChord>>, IEquatable<GHLInstrument> Inheritance object Instrument Instrument<GHLChord> GHLInstrument Implements IEmptyVerifiable IEquatable<Instrument> IEquatable<Instrument<GHLChord>> IEquatable<GHLInstrument> Inherited Members Instrument<GHLChord>.Easy Instrument<GHLChord>.Medium Instrument<GHLChord>.Hard Instrument<GHLChord>.Expert Instrument<GHLChord>.GetTrack(Difficulty) Instrument<GHLChord>.CreateTrack(Difficulty) Instrument<GHLChord>.RemoveTrack(Difficulty) Instrument<GHLChord>.GetEasy() Instrument<GHLChord>.GetMedium() Instrument<GHLChord>.GetHard() Instrument<GHLChord>.GetExpert() Instrument<GHLChord>.GetTracks() Instrument<GHLChord>.GetExistingTracks() Instrument<GHLChord>.SetTrack(Track<GHLChord>) Instrument.IsEmpty Instrument.InstrumentType Instrument.SpecialPhrases Instrument.GetDifficulty(InstrumentDifficultySet) Instrument.SetDifficulty(InstrumentDifficultySet, sbyte?) Instrument.ShareLocalEvents(TrackObjectSource) Instrument.ShareSpecial(TrackObjectSource) Instrument.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Instrument, float) Constructors GHLInstrument() public GHLInstrument() GHLInstrument(GHLInstrumentIdentity) public GHLInstrument(GHLInstrumentIdentity identity) Parameters identity GHLInstrumentIdentity Properties InstrumentIdentity public GHLInstrumentIdentity InstrumentIdentity { get; init; } Property Value GHLInstrumentIdentity Methods GetIdentity() protected override InstrumentIdentity GetIdentity() Returns InstrumentIdentity"
  },
  "api/ChartTools.GHLInstrumentIdentity.html": {
    "href": "api/ChartTools.GHLInstrumentIdentity.html",
    "title": "Enum GHLInstrumentIdentity | ChartTools",
    "keywords": "Enum GHLInstrumentIdentity Namespace ChartTools Assembly ChartTools.dll Guitar Hero Live instruments public enum GHLInstrumentIdentity : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Bass = 2 Guitar = 1 Remarks Casting to InstrumentIdentity will match the instrument."
  },
  "api/ChartTools.GHLLane.html": {
    "href": "api/ChartTools.GHLLane.html",
    "title": "Enum GHLLane | ChartTools",
    "keywords": "Enum GHLLane Namespace ChartTools Assembly ChartTools.dll Frets for a GHL note public enum GHLLane : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Black1 = 1 Black2 = 2 Black3 = 3 Open = 0 White1 = 4 White2 = 5 White3 = 6"
  },
  "api/ChartTools.IChord.html": {
    "href": "api/ChartTools.IChord.html",
    "title": "Interface IChord | ChartTools",
    "keywords": "Interface IChord Namespace ChartTools Assembly ChartTools.dll Set of notes tied together. public interface IChord : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inherited Members ITrackObject.Position IEquatable<IReadOnlyTrackObject>.Equals(IReadOnlyTrackObject) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) Remarks Depending on the chord type, notes will be on the same position or in sequence. Properties Notes Read-only set of the notes in the chord. IReadOnlyCollection<INote> Notes { get; } Property Value IReadOnlyCollection<INote> Methods CreateNote(byte, uint) INote CreateNote(byte index, uint length = 0) Parameters index byte length uint Returns INote"
  },
  "api/ChartTools.IEmptyVerifiable.html": {
    "href": "api/ChartTools.IEmptyVerifiable.html",
    "title": "Interface IEmptyVerifiable | ChartTools",
    "keywords": "Interface IEmptyVerifiable Namespace ChartTools Assembly ChartTools.dll Adds support for a property defining if an object is empty public interface IEmptyVerifiable Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties IsEmpty true if containing no data bool IsEmpty { get; } Property Value bool"
  },
  "api/ChartTools.ILongObject.html": {
    "href": "api/ChartTools.ILongObject.html",
    "title": "Interface ILongObject | ChartTools",
    "keywords": "Interface ILongObject Namespace ChartTools Assembly ChartTools.dll public interface ILongObject : IReadOnlyLongObject Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ILongObject, float) Properties Length Tick number on the track. uint Length { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution."
  },
  "api/ChartTools.ILongTrackObject.html": {
    "href": "api/ChartTools.ILongTrackObject.html",
    "title": "Interface ILongTrackObject | ChartTools",
    "keywords": "Interface ILongTrackObject Namespace ChartTools Assembly ChartTools.dll public interface ILongTrackObject : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject>, ILongObject, IReadOnlyLongObject Inherited Members ITrackObject.Position IEquatable<IReadOnlyTrackObject>.Equals(IReadOnlyTrackObject) ILongObject.Length Extension Methods TempoRescaler.Rescale(ILongObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ILongTrackObject, float) TempoRescaler.Rescale(ITrackObject, float) Properties EndPosition Tick number marking the end of the object uint EndPosition { get; } Property Value uint"
  },
  "api/ChartTools.INote.html": {
    "href": "api/ChartTools.INote.html",
    "title": "Interface INote | ChartTools",
    "keywords": "Interface INote Namespace ChartTools Assembly ChartTools.dll public interface INote : ILongObject, IReadOnlyLongObject Inherited Members ILongObject.Length Extension Methods TempoRescaler.Rescale(ILongObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Index Numerical value of the note identity byte Index { get; } Property Value byte"
  },
  "api/ChartTools.IO.AsyncRead-1.html": {
    "href": "api/ChartTools.IO.AsyncRead-1.html",
    "title": "Delegate AsyncRead<T> | ChartTools",
    "keywords": "Delegate AsyncRead<T> Namespace ChartTools.IO Assembly ChartTools.dll Asynchronous read method that generates an object of the target type public delegate Task<T> AsyncRead<T>(string path) Parameters path string File path Returns Task<T> Type Parameters T Output type Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.IO.AsyncWrite-1.html": {
    "href": "api/ChartTools.IO.AsyncWrite-1.html",
    "title": "Delegate AsyncWrite<T> | ChartTools",
    "keywords": "Delegate AsyncWrite<T> Namespace ChartTools.IO Assembly ChartTools.dll Write method hat takes an object of a target type public delegate Task AsyncWrite<T>(string path, T content) Parameters path string File path content T Object to write Returns Task Type Parameters T Target type Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.IO.Chart.ChartFile.html": {
    "href": "api/ChartTools.IO.Chart.ChartFile.html",
    "title": "Class ChartFile | ChartTools",
    "keywords": "Class ChartFile Namespace ChartTools.IO.Chart Assembly ChartTools.dll Provides methods for reading and writing chart files public static class ChartFile Inheritance object ChartFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultReadConfig Default configuration to use for reading when the provided configuration is default public static ChartReadingConfiguration DefaultReadConfig { get; set; } Property Value ChartReadingConfiguration DefaultWriteConfig Default configuration to use for writing when the provided configuration is default public static ChartWritingConfiguration DefaultWriteConfig { get; set; } Property Value ChartWritingConfiguration Methods ReadDrums(string, ChartReadingConfiguration?, FormattingRules?) Reads drums from a chart file. public static Drums? ReadDrums(string path, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file to read config ChartReadingConfiguration formatting FormattingRules Rules defined in song.ini that affect how the song data file is read and written Returns Drums Instance of Instrument<TChord> where TChord is DrumsChord containing all drums data null if the file contains no drums data ReadDrumsAsync(string, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Drums?> ReadDrumsAsync(string path, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Drums> ReadDrumsTrack(string, Difficulty, ChartReadingConfiguration?, FormattingRules?) public static Track<DrumsChord> ReadDrumsTrack(string path, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules Returns Track<DrumsChord> ReadDrumsTrackAsync(string, Difficulty, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Track<DrumsChord>> ReadDrumsTrackAsync(string path, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<DrumsChord>> ReadGlobalEvents(string) Reads global events from a file. public static List<GlobalEvent> ReadGlobalEvents(string path) Parameters path string Path of the file Returns List<GlobalEvent> ReadGlobalEventsAsync(string, CancellationToken) Reads global events from a file asynchronously using multitasking. public static Task<List<GlobalEvent>> ReadGlobalEventsAsync(string path, CancellationToken cancellationToken = default) Parameters path string Path of the file cancellationToken CancellationToken Token to request cancellation Returns Task<List<GlobalEvent>> ReadInstrument(string, GHLInstrumentIdentity, ChartReadingConfiguration?, FormattingRules?) Reads a Guitar Hero Live instrument from a chart file. public static GHLInstrument? ReadInstrument(string path, GHLInstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file to read instrument GHLInstrumentIdentity config ChartReadingConfiguration formatting FormattingRules Returns GHLInstrument Instance of Instrument<TChord> where TChord is GHLChord containing all data about the given instrument null if the file has no data for the given instrument ReadInstrument(string, InstrumentIdentity, ChartReadingConfiguration?, FormattingRules?) Reads an instrument from a chart file. public static Instrument? ReadInstrument(string path, InstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file to read instrument InstrumentIdentity Instrument to read config ChartReadingConfiguration formatting FormattingRules Returns Instrument Instance of Instrument containing all data about the given instrument null if the file contains no data for the given instrument ReadInstrument(string, StandardInstrumentIdentity, ChartReadingConfiguration?, FormattingRules?) public static StandardInstrument? ReadInstrument(string path, StandardInstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument StandardInstrumentIdentity config ChartReadingConfiguration formatting FormattingRules Returns StandardInstrument ReadInstrumentAsync(string, GHLInstrumentIdentity, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<GHLInstrument?> ReadInstrumentAsync(string path, GHLInstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument GHLInstrumentIdentity config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<GHLInstrument> ReadInstrumentAsync(string, InstrumentIdentity, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Instrument?> ReadInstrumentAsync(string path, InstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument InstrumentIdentity config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Instrument> ReadInstrumentAsync(string, StandardInstrumentIdentity, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<StandardInstrument?> ReadInstrumentAsync(string path, StandardInstrumentIdentity instrument, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument StandardInstrumentIdentity config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<StandardInstrument> ReadLyrics(string) Reads lyrics from a chart file. public static IEnumerable<Phrase> ReadLyrics(string path) Parameters path string Path of the file to read Returns IEnumerable<Phrase> Enumerable of Phrase containing the lyrics from the file ReadLyricsAsync(string, CancellationToken) Reads lyrics from a chart file asynchronously using multitasking. public static Task<IEnumerable<Phrase>> ReadLyricsAsync(string path, CancellationToken cancellationToken = default) Parameters path string Path of the file to read cancellationToken CancellationToken Token to request cancellation Returns Task<IEnumerable<Phrase>> ReadMetadata(string) Reads metadata from a chart file. public static Metadata ReadMetadata(string path) Parameters path string Path of the file to read Returns Metadata ReadSong(string, ChartReadingConfiguration?, FormattingRules?) Reads all elements of a Song from a file. public static Song ReadSong(string path, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file config ChartReadingConfiguration formatting FormattingRules Rules defined in song.ini that affect how the song data file is read and written Returns Song ReadSongAsync(string, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Song> ReadSongAsync(string path, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Song> ReadSyncTrack(string, ChartReadingConfiguration?, FormattingRules?) Reads a SyncTrack from a file. public static SyncTrack ReadSyncTrack(string path, ChartReadingConfiguration? config, FormattingRules? formatting = null) Parameters path string Path of the file config ChartReadingConfiguration formatting FormattingRules Returns SyncTrack ReadSyncTrackAsync(string, ChartReadingConfiguration?, CancellationToken) Reads a SyncTrack from a file asynchronously using multitasking. public static Task<SyncTrack> ReadSyncTrackAsync(string path, ChartReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string Path of the file config ChartReadingConfiguration cancellationToken CancellationToken Token to request cancellation Returns Task<SyncTrack> ReadTrack(string, GHLInstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?) public static Track<GHLChord> ReadTrack(string path, GHLInstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument GHLInstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules Returns Track<GHLChord> ReadTrack(string, InstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?) public static Track ReadTrack(string path, InstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument InstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules Returns Track ReadTrack(string, StandardInstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?) public static Track<StandardChord> ReadTrack(string path, StandardInstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument StandardInstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules Returns Track<StandardChord> ReadTrackAsync(string, GHLInstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Track<GHLChord>> ReadTrackAsync(string path, GHLInstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument GHLInstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<GHLChord>> ReadTrackAsync(string, InstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Track> ReadTrackAsync(string path, InstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument InstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track> ReadTrackAsync(string, StandardInstrumentIdentity, Difficulty, ChartReadingConfiguration?, FormattingRules?, CancellationToken) public static Task<Track<StandardChord>> ReadTrackAsync(string path, StandardInstrumentIdentity instrument, Difficulty difficulty, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument StandardInstrumentIdentity difficulty Difficulty config ChartReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<StandardChord>> ReadVocals(string) Reads vocals from the global events in a chart file. public static Vocals? ReadVocals(string path) Parameters path string Path of the file to read Returns Vocals Instance of Instrument<TChord> where TChord is Phrase containing lyric and timing data null if the file contains no drums data ReadVocalsAsync(string, CancellationToken) public static Task<Vocals?> ReadVocalsAsync(string path, CancellationToken cancellationToken = default) Parameters path string cancellationToken CancellationToken Returns Task<Vocals> ReplaceGlobalEvents(string, IEnumerable<GlobalEvent>) Replaces the global events in a file. public static void ReplaceGlobalEvents(string path, IEnumerable<GlobalEvent> events) Parameters path string Path of the file to write events IEnumerable<GlobalEvent> Events to use as a replacement ReplaceGlobalEventsAsync(string, IEnumerable<GlobalEvent>, CancellationToken) public static Task ReplaceGlobalEventsAsync(string path, IEnumerable<GlobalEvent> events, CancellationToken cancellationToken = default) Parameters path string events IEnumerable<GlobalEvent> cancellationToken CancellationToken Returns Task ReplaceInstrument(string, Instrument, ChartWritingConfiguration?, FormattingRules?) Replaces an instrument in a file. public static void ReplaceInstrument(string path, Instrument instrument, ChartWritingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file to write instrument Instrument config ChartWritingConfiguration formatting FormattingRules ReplaceInstrumentAsync(string, Instrument, ChartWritingConfiguration?, FormattingRules?, CancellationToken) public static Task ReplaceInstrumentAsync(string path, Instrument instrument, ChartWritingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument Instrument config ChartWritingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task ReplaceMetadata(string, Metadata) Replaces the metadata in a file. public static void ReplaceMetadata(string path, Metadata metadata) Parameters path string Path of the file to read metadata Metadata Metadata to write ReplaceSyncTrack(string, SyncTrack, ChartWritingConfiguration?) Replaces the sync track in a file. public static void ReplaceSyncTrack(string path, SyncTrack syncTrack, ChartWritingConfiguration? config = null) Parameters path string Path of the file to write syncTrack SyncTrack Sync track to write config ChartWritingConfiguration ReplaceSyncTrackAsync(string, SyncTrack, ChartWritingConfiguration?, CancellationToken) public static Task ReplaceSyncTrackAsync(string path, SyncTrack syncTrack, ChartWritingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string syncTrack SyncTrack config ChartWritingConfiguration cancellationToken CancellationToken Returns Task ReplaceTrack(string, Track, ChartWritingConfiguration?, FormattingRules?) public static void ReplaceTrack(string path, Track track, ChartWritingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string track Track config ChartWritingConfiguration formatting FormattingRules ReplaceTrackAsync(string, Track, ChartWritingConfiguration?, FormattingRules?, CancellationToken) public static Task ReplaceTrackAsync(string path, Track track, ChartWritingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string track Track config ChartWritingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task WriteSong(string, Song, ChartWritingConfiguration?) Writes a song to a chart file. public static void WriteSong(string path, Song song, ChartWritingConfiguration? config = null) Parameters path string Path of the file to write song Song Song to write config ChartWritingConfiguration WriteSongAsync(string, Song, ChartWritingConfiguration?, CancellationToken) public static Task WriteSongAsync(string path, Song song, ChartWritingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string song Song config ChartWritingConfiguration cancellationToken CancellationToken Returns Task"
  },
  "api/ChartTools.IO.Chart.ChartSection.html": {
    "href": "api/ChartTools.IO.Chart.ChartSection.html",
    "title": "Class ChartSection | ChartTools",
    "keywords": "Class ChartSection Namespace ChartTools.IO.Chart Assembly ChartTools.dll public class ChartSection : SectionSet<string>, IList<Section<string>>, ICollection<Section<string>>, IEnumerable<Section<string>>, IEnumerable Inheritance object SectionSet<string> ChartSection Implements IList<Section<string>> ICollection<Section<string>> IEnumerable<Section<string>> IEnumerable Inherited Members SectionSet<string>.Count SectionSet<string>.IsReadOnly SectionSet<string>.this[int] SectionSet<string>.IndexOf(Section<string>) SectionSet<string>.Insert(int, Section<string>) SectionSet<string>.RemoveAt(int) SectionSet<string>.Add(Section<string>) SectionSet<string>.Clear() SectionSet<string>.Contains(Section<string>) SectionSet<string>.CopyTo(Section<string>[], int) SectionSet<string>.Remove(Section<string>) SectionSet<string>.GetEnumerator() SectionSet<string>.Get(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.AlternateBy<T, TKey>(IEnumerable<IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.Alternate<T>(IEnumerable<IEnumerable<T>>) CollectionExtensions.BinarySearchIndex<T, TKey>(IList<T>, TKey, Func<T, TKey>, out bool) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors ChartSection() public ChartSection() Fields DefaultReservedHeaders public static readonly ReservedSectionHeaderSet DefaultReservedHeaders Field Value ReservedSectionHeaderSet Properties ReservedHeaders public override ReservedSectionHeaderSet ReservedHeaders { get; } Property Value ReservedSectionHeaderSet"
  },
  "api/ChartTools.IO.Chart.Configuration.ChartReadingConfiguration.html": {
    "href": "api/ChartTools.IO.Chart.Configuration.ChartReadingConfiguration.html",
    "title": "Class ChartReadingConfiguration | ChartTools",
    "keywords": "Class ChartReadingConfiguration Namespace ChartTools.IO.Chart.Configuration Assembly ChartTools.dll public record ChartReadingConfiguration : CommonChartConfiguration, IEquatable<CommonChartConfiguration>, ICommonReadingConfiguration, ICommonConfiguration, IEquatable<ChartReadingConfiguration> Inheritance object CommonChartConfiguration ChartReadingConfiguration Implements IEquatable<CommonChartConfiguration> ICommonReadingConfiguration ICommonConfiguration IEquatable<ChartReadingConfiguration> Inherited Members CommonChartConfiguration.DuplicateTrackObjectPolicy CommonChartConfiguration.OverlappingStarPowerPolicy CommonChartConfiguration.SnappedNotesPolicy CommonChartConfiguration.SoloNoStarPowerPolicy object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties TempolessAnchorPolicy Defines how a tempo anchor with no parent marker is handled. public required TempolessAnchorPolicy TempolessAnchorPolicy { get; init; } Property Value TempolessAnchorPolicy UnknownSectionPolicy public required UnknownSectionPolicy UnknownSectionPolicy { get; init; } Property Value UnknownSectionPolicy"
  },
  "api/ChartTools.IO.Chart.Configuration.ChartWritingConfiguration.html": {
    "href": "api/ChartTools.IO.Chart.Configuration.ChartWritingConfiguration.html",
    "title": "Class ChartWritingConfiguration | ChartTools",
    "keywords": "Class ChartWritingConfiguration Namespace ChartTools.IO.Chart.Configuration Assembly ChartTools.dll public record ChartWritingConfiguration : CommonChartConfiguration, IEquatable<CommonChartConfiguration>, ICommonWritingConfiguration, ICommonConfiguration, IEquatable<ChartWritingConfiguration> Inheritance object CommonChartConfiguration ChartWritingConfiguration Implements IEquatable<CommonChartConfiguration> ICommonWritingConfiguration ICommonConfiguration IEquatable<ChartWritingConfiguration> Inherited Members CommonChartConfiguration.DuplicateTrackObjectPolicy CommonChartConfiguration.OverlappingStarPowerPolicy CommonChartConfiguration.SnappedNotesPolicy CommonChartConfiguration.SoloNoStarPowerPolicy object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties UnsupportedModifierPolicy public required UnsupportedModifierPolicy UnsupportedModifierPolicy { get; init; } Property Value UnsupportedModifierPolicy"
  },
  "api/ChartTools.IO.Chart.Configuration.CommonChartConfiguration.html": {
    "href": "api/ChartTools.IO.Chart.Configuration.CommonChartConfiguration.html",
    "title": "Class CommonChartConfiguration | ChartTools",
    "keywords": "Class CommonChartConfiguration Namespace ChartTools.IO.Chart.Configuration Assembly ChartTools.dll public abstract record CommonChartConfiguration : ICommonConfiguration, IEquatable<CommonChartConfiguration> Inheritance object CommonChartConfiguration Implements ICommonConfiguration IEquatable<CommonChartConfiguration> Derived ChartReadingConfiguration ChartWritingConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties DuplicateTrackObjectPolicy Defines how duplicate track objects are handled. public required DuplicateTrackObjectPolicy DuplicateTrackObjectPolicy { get; init; } Property Value DuplicateTrackObjectPolicy OverlappingStarPowerPolicy Defines how overlapping star power phrases should be handled. public required OverlappingSpecialPhrasePolicy OverlappingStarPowerPolicy { get; init; } Property Value OverlappingSpecialPhrasePolicy SnappedNotesPolicy Defines how notes within ticks of each other are handled during a Midi operation. public required SnappedNotesPolicy SnappedNotesPolicy { get; init; } Property Value SnappedNotesPolicy SoloNoStarPowerPolicy public required SoloNoStarPowerPolicy SoloNoStarPowerPolicy { get; init; } Property Value SoloNoStarPowerPolicy"
  },
  "api/ChartTools.IO.Chart.Configuration.html": {
    "href": "api/ChartTools.IO.Chart.Configuration.html",
    "title": "Namespace ChartTools.IO.Chart.Configuration | ChartTools",
    "keywords": "Namespace ChartTools.IO.Chart.Configuration Classes ChartReadingConfiguration ChartWritingConfiguration CommonChartConfiguration"
  },
  "api/ChartTools.IO.Chart.Serializing.ChartKeySerializableAttribute.html": {
    "href": "api/ChartTools.IO.Chart.Serializing.ChartKeySerializableAttribute.html",
    "title": "Class ChartKeySerializableAttribute | ChartTools",
    "keywords": "Class ChartKeySerializableAttribute Namespace ChartTools.IO.Chart.Serializing Assembly ChartTools.dll public class ChartKeySerializableAttribute : KeySerializableAttribute Inheritance object Attribute KeySerializableAttribute ChartKeySerializableAttribute Inherited Members KeySerializableAttribute.Key KeySerializableAttribute.GetSerializable<TAttribute>(object) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors ChartKeySerializableAttribute(string) public ChartKeySerializableAttribute(string key) Parameters key string Properties Format public override FileType Format { get; } Property Value FileType Methods GetSerializable(object) public static IEnumerable<(string key, string value)> GetSerializable(object source) Parameters source object Returns IEnumerable<(string key, string value)> GetValueString(object) protected override string GetValueString(object propValue) Parameters propValue object Returns string"
  },
  "api/ChartTools.IO.Chart.Serializing.html": {
    "href": "api/ChartTools.IO.Chart.Serializing.html",
    "title": "Namespace ChartTools.IO.Chart.Serializing | ChartTools",
    "keywords": "Namespace ChartTools.IO.Chart.Serializing Classes ChartKeySerializableAttribute"
  },
  "api/ChartTools.IO.Chart.html": {
    "href": "api/ChartTools.IO.Chart.html",
    "title": "Namespace ChartTools.IO.Chart | ChartTools",
    "keywords": "Namespace ChartTools.IO.Chart Classes ChartFile Provides methods for reading and writing chart files ChartSection"
  },
  "api/ChartTools.IO.Configuration.Common.ICommonConfiguration.html": {
    "href": "api/ChartTools.IO.Configuration.Common.ICommonConfiguration.html",
    "title": "Interface ICommonConfiguration | ChartTools",
    "keywords": "Interface ICommonConfiguration Namespace ChartTools.IO.Configuration.Common Assembly ChartTools.dll Configuration object to direct the reading or writing of a file public interface ICommonConfiguration Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Remarks If null, the default configuration for the file format will be used. Properties DuplicateTrackObjectPolicy Defines how duplicate track objects are handled. DuplicateTrackObjectPolicy DuplicateTrackObjectPolicy { get; } Property Value DuplicateTrackObjectPolicy OverlappingStarPowerPolicy Defines how overlapping star power phrases should be handled. OverlappingSpecialPhrasePolicy OverlappingStarPowerPolicy { get; } Property Value OverlappingSpecialPhrasePolicy SnappedNotesPolicy Defines how notes within ticks of each other are handled during a Midi operation. SnappedNotesPolicy SnappedNotesPolicy { get; } Property Value SnappedNotesPolicy"
  },
  "api/ChartTools.IO.Configuration.Common.ICommonReadingConfiguration.html": {
    "href": "api/ChartTools.IO.Configuration.Common.ICommonReadingConfiguration.html",
    "title": "Interface ICommonReadingConfiguration | ChartTools",
    "keywords": "Interface ICommonReadingConfiguration Namespace ChartTools.IO.Configuration.Common Assembly ChartTools.dll public interface ICommonReadingConfiguration : ICommonConfiguration Inherited Members ICommonConfiguration.DuplicateTrackObjectPolicy ICommonConfiguration.OverlappingStarPowerPolicy ICommonConfiguration.SnappedNotesPolicy Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties UnknownSectionPolicy UnknownSectionPolicy UnknownSectionPolicy { get; } Property Value UnknownSectionPolicy"
  },
  "api/ChartTools.IO.Configuration.Common.ICommonWritingConfiguration.html": {
    "href": "api/ChartTools.IO.Configuration.Common.ICommonWritingConfiguration.html",
    "title": "Interface ICommonWritingConfiguration | ChartTools",
    "keywords": "Interface ICommonWritingConfiguration Namespace ChartTools.IO.Configuration.Common Assembly ChartTools.dll public interface ICommonWritingConfiguration : ICommonConfiguration Inherited Members ICommonConfiguration.DuplicateTrackObjectPolicy ICommonConfiguration.OverlappingStarPowerPolicy ICommonConfiguration.SnappedNotesPolicy Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties UnsupportedModifierPolicy UnsupportedModifierPolicy UnsupportedModifierPolicy { get; init; } Property Value UnsupportedModifierPolicy"
  },
  "api/ChartTools.IO.Configuration.Common.html": {
    "href": "api/ChartTools.IO.Configuration.Common.html",
    "title": "Namespace ChartTools.IO.Configuration.Common | ChartTools",
    "keywords": "Namespace ChartTools.IO.Configuration.Common Interfaces ICommonConfiguration Configuration object to direct the reading or writing of a file ICommonReadingConfiguration ICommonWritingConfiguration"
  },
  "api/ChartTools.IO.Configuration.DuplicateTrackObjectPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.DuplicateTrackObjectPolicy.html",
    "title": "Enum DuplicateTrackObjectPolicy | ChartTools",
    "keywords": "Enum DuplicateTrackObjectPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how duplicate track objects are handled. public enum DuplicateTrackObjectPolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields IncludeAll = 2 Include all objects. IncludeFirst = 1 Include only the first object ThrowException = 0 Throw an exception with the position."
  },
  "api/ChartTools.IO.Configuration.LyricEventSource.html": {
    "href": "api/ChartTools.IO.Configuration.LyricEventSource.html",
    "title": "Enum LyricEventSource | ChartTools",
    "keywords": "Enum LyricEventSource Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Define where lyrics are obtained when writing a format that defines lyrics as events. public enum LyricEventSource : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields GlobalEvents = 0 Obtain lyrics from GlobalEvents. Vocals = 1 Obtain lyrics from the Vocals instrument."
  },
  "api/ChartTools.IO.Configuration.OverlappingSpecialPhrasePolicy.html": {
    "href": "api/ChartTools.IO.Configuration.OverlappingSpecialPhrasePolicy.html",
    "title": "Enum OverlappingSpecialPhrasePolicy | ChartTools",
    "keywords": "Enum OverlappingSpecialPhrasePolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how overlapping star power phrases should be handled. public enum OverlappingSpecialPhrasePolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Cut = 2 Cut the length of the first phrase to the start of the next one. Ignore = 1 Ignore the overlapping phrase. ThrowException = 0 Throw an exception."
  },
  "api/ChartTools.IO.Configuration.ReadingConfiguration.html": {
    "href": "api/ChartTools.IO.Configuration.ReadingConfiguration.html",
    "title": "Class ReadingConfiguration | ChartTools",
    "keywords": "Class ReadingConfiguration Namespace ChartTools.IO.Configuration Assembly ChartTools.dll public class ReadingConfiguration Inheritance object ReadingConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Default public static readonly ReadingConfiguration Default Field Value ReadingConfiguration Properties Chart public ChartReadingConfiguration Chart { get; set; } Property Value ChartReadingConfiguration"
  },
  "api/ChartTools.IO.Configuration.SnappedNotesPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.SnappedNotesPolicy.html",
    "title": "Enum SnappedNotesPolicy | ChartTools",
    "keywords": "Enum SnappedNotesPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how notes within ticks of each other are handled during a Midi operation. public enum SnappedNotesPolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Ignore = 2 Leave each note as its own chord. Snap = 1 Combine the notes as a single chord at the position of the earlier note. ThrowException = 0 Throw an exception."
  },
  "api/ChartTools.IO.Configuration.SoloNoStarPowerPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.SoloNoStarPowerPolicy.html",
    "title": "Enum SoloNoStarPowerPolicy | ChartTools",
    "keywords": "Enum SoloNoStarPowerPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how Solo or SoloEnd events are handled when there are no star power phrases. public enum SoloNoStarPowerPolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Convert = 1 Convert the space between the Solo and SoloEnd event to a star power phrase. StoreAsEvents = 0 Store the events under LocalEvents. Remarks StoreAsEvents is always used when star power phrases are present."
  },
  "api/ChartTools.IO.Configuration.TempolessAnchorPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.TempolessAnchorPolicy.html",
    "title": "Enum TempolessAnchorPolicy | ChartTools",
    "keywords": "Enum TempolessAnchorPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how a tempo anchor with no parent marker is handled. public enum TempolessAnchorPolicy Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Create = 2 Create a tempo marker with the anchor. Ignore = 1 Ignore the anchor. ThrowException = 0 Throw an exception."
  },
  "api/ChartTools.IO.Configuration.TrackObjectSource.html": {
    "href": "api/ChartTools.IO.Configuration.TrackObjectSource.html",
    "title": "Enum TrackObjectSource | ChartTools",
    "keywords": "Enum TrackObjectSource Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Difficulty of the Track to serve as a source of for track objects for which the target format requires these objects to be the same across all difficulties. public enum TrackObjectSource : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Easy = 0 Use the objects from the Easy track. Expert = 3 Use the objects from the Expert track. Hard = 2 Use the objects from the Hard track. Medium = 1 Use the objects from the Medium track. Merge = 4 Combine the unique track objects from all the tracks in the instrument. Remarks Can be cast from Difficulty."
  },
  "api/ChartTools.IO.Configuration.UnknownSectionPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.UnknownSectionPolicy.html",
    "title": "Enum UnknownSectionPolicy | ChartTools",
    "keywords": "Enum UnknownSectionPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines how unknown sections or Midi chunks are handled. public enum UnknownSectionPolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Store = 1 Store the raw data to be included when writing. ThrowException = 0 Throw an exception with the section or chunk header."
  },
  "api/ChartTools.IO.Configuration.UnsupportedModifierPolicy.html": {
    "href": "api/ChartTools.IO.Configuration.UnsupportedModifierPolicy.html",
    "title": "Enum UnsupportedModifierPolicy | ChartTools",
    "keywords": "Enum UnsupportedModifierPolicy Namespace ChartTools.IO.Configuration Assembly ChartTools.dll Defines chord modifiers not supported by the target format are handled. public enum UnsupportedModifierPolicy : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Convert = 1 Convert the modifier to one supported by the format. IgnoreChord = 3 Ignore the chord containing the modifier. IgnoreModifier = 2 Ignore the modifier. ThrowException = 0 Throw an exception with the modifier index."
  },
  "api/ChartTools.IO.Configuration.WritingConfiguration.html": {
    "href": "api/ChartTools.IO.Configuration.WritingConfiguration.html",
    "title": "Class WritingConfiguration | ChartTools",
    "keywords": "Class WritingConfiguration Namespace ChartTools.IO.Configuration Assembly ChartTools.dll public class WritingConfiguration Inheritance object WritingConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Default public static readonly WritingConfiguration Default Field Value WritingConfiguration Properties Chart public ChartWritingConfiguration Chart { get; set; } Property Value ChartWritingConfiguration"
  },
  "api/ChartTools.IO.Configuration.html": {
    "href": "api/ChartTools.IO.Configuration.html",
    "title": "Namespace ChartTools.IO.Configuration | ChartTools",
    "keywords": "Namespace ChartTools.IO.Configuration Classes ReadingConfiguration WritingConfiguration Enums DuplicateTrackObjectPolicy Defines how duplicate track objects are handled. LyricEventSource Define where lyrics are obtained when writing a format that defines lyrics as events. OverlappingSpecialPhrasePolicy Defines how overlapping star power phrases should be handled. SnappedNotesPolicy Defines how notes within ticks of each other are handled during a Midi operation. SoloNoStarPowerPolicy Defines how Solo or SoloEnd events are handled when there are no star power phrases. TempolessAnchorPolicy Defines how a tempo anchor with no parent marker is handled. TrackObjectSource Difficulty of the Track to serve as a source of for track objects for which the target format requires these objects to be the same across all difficulties. UnknownSectionPolicy Defines how unknown sections or Midi chunks are handled. UnsupportedModifierPolicy Defines chord modifiers not supported by the target format are handled."
  },
  "api/ChartTools.IO.DirectoryResult-1.html": {
    "href": "api/ChartTools.IO.DirectoryResult-1.html",
    "title": "Class DirectoryResult<T> | ChartTools",
    "keywords": "Class DirectoryResult<T> Namespace ChartTools.IO Assembly ChartTools.dll public record DirectoryResult<T> : IEquatable<DirectoryResult<T>> Type Parameters T Inheritance object DirectoryResult<T> Implements IEquatable<DirectoryResult<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors DirectoryResult(T, Metadata) public DirectoryResult(T Result, Metadata Metadata) Parameters Result T Metadata Metadata Properties Metadata public Metadata Metadata { get; init; } Property Value Metadata Result public T Result { get; init; } Property Value T"
  },
  "api/ChartTools.IO.EntryException.html": {
    "href": "api/ChartTools.IO.EntryException.html",
    "title": "Class EntryException | ChartTools",
    "keywords": "Class EntryException Namespace ChartTools.IO Assembly ChartTools.dll public class EntryException : FormatException, ISerializable Inheritance object Exception SystemException FormatException EntryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors EntryException() public EntryException()"
  },
  "api/ChartTools.IO.Formatting.AlbumTrackKey.html": {
    "href": "api/ChartTools.IO.Formatting.AlbumTrackKey.html",
    "title": "Enum AlbumTrackKey | ChartTools",
    "keywords": "Enum AlbumTrackKey Namespace ChartTools.IO.Formatting Assembly ChartTools.dll [Flags] public enum AlbumTrackKey : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields AlbumTrack = 0 Track = 1"
  },
  "api/ChartTools.IO.Formatting.CharterKey.html": {
    "href": "api/ChartTools.IO.Formatting.CharterKey.html",
    "title": "Enum CharterKey | ChartTools",
    "keywords": "Enum CharterKey Namespace ChartTools.IO.Formatting Assembly ChartTools.dll [Flags] public enum CharterKey : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Charter = 0 Frets = 1"
  },
  "api/ChartTools.IO.Formatting.FormattingRules.html": {
    "href": "api/ChartTools.IO.Formatting.FormattingRules.html",
    "title": "Class FormattingRules | ChartTools",
    "keywords": "Class FormattingRules Namespace ChartTools.IO.Formatting Assembly ChartTools.dll Rules defined in song.ini that affect how the song data file is read and written public class FormattingRules Inheritance object FormattingRules Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Remarks Property summaries provided by Nathan Hurst. Properties AlbumTrackKey public AlbumTrackKey AlbumTrackKey { get; set; } Property Value AlbumTrackKey CharterKey public CharterKey CharterKey { get; set; } Property Value CharterKey ForceEightHopoFrequency (FoFiX) Overrides the natural HOPO threshold to be a 1/8th step. [IniKeySerializable(\"eighthnote_hopo\")] public bool? ForceEightHopoFrequency { get; set; } Property Value bool? HopoFrequency Overrides the natural HOPO threshold with the specified number of ticks. [IniKeySerializable(\"hopo_frequency\")] public uint? HopoFrequency { get; set; } Property Value uint? HopoFrequencyStep (FoFiX) Overrides the natural HOPO threshold using numbers from 0 to 5. [IniKeySerializable(\"hopofreq\")] public HopoFrequencyStep? HopoFrequencyStep { get; set; } Property Value HopoFrequencyStep? MultiplierNote Overrides the Star Power phrase MIDI note for .mid charts. [IniKeySerializable(\"multiplier_note\")] public byte? MultiplierNote { get; set; } Property Value byte? Resolution Number of Position values per beat [ChartKeySerializable(\"Resolution\")] public uint? Resolution { get; set; } Property Value uint? StarPowerNote (PhaseShift) Overrides the Star Power phrase MIDI note for .mid charts. [IniKeySerializable(\"star_power_note\")] public byte? StarPowerNote { get; set; } Property Value byte? SustainCutoff Overrides the default sustain cutoff threshold with the specified number of ticks. [IniKeySerializable(\"sustain_cutoff_threshold\")] public uint? SustainCutoff { get; set; } Property Value uint? SysExHighHat (PhaseShift) Indicates if the chart uses SysEx events for Drums Real hi-hat pedal control. [IniKeySerializable(\"sysex_high_hat_ctrl\")] public bool? SysExHighHat { get; set; } Property Value bool? SysExOpenBass (PhaseShift) Indicates if the chart uses SysEx events for open notes. [IniKeySerializable(\"sysex_open_bass\")] public bool? SysExOpenBass { get; set; } Property Value bool? SysExRimshot (PhaseShift) Indicates if the chart uses SysEx events for Drums Real rimshot hits. [IniKeySerializable(\"sysex_rimshot\")] public bool? SysExRimshot { get; set; } Property Value bool? SysExSliders (PhaseShift) Indicates if the chart uses SysEx events for sliders/tap notes. [IniKeySerializable(\"sysex_slider\")] public bool? SysExSliders { get; set; } Property Value bool? SysexProSlide (PhaseShift) Indicates if the chart uses SysEx events for Pro Guitar/Bass slide directions. [IniKeySerializable(\"sysex_pro_slide\")] public bool? SysexProSlide { get; set; } Property Value bool? TrueHopoFrequency public uint? TrueHopoFrequency { get; } Property Value uint? TrueResolution public uint TrueResolution { get; } Property Value uint TrueStarPowerNote public byte? TrueStarPowerNote { get; } Property Value byte?"
  },
  "api/ChartTools.IO.Formatting.HopoFrequencyStep.html": {
    "href": "api/ChartTools.IO.Formatting.HopoFrequencyStep.html",
    "title": "Enum HopoFrequencyStep | ChartTools",
    "keywords": "Enum HopoFrequencyStep Namespace ChartTools.IO.Formatting Assembly ChartTools.dll public enum HopoFrequencyStep : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Eight = 3 Fourth = 5 Sixteenth = 1 Sixth = 4 Twelveth = 2 TwentyFourth = 0"
  },
  "api/ChartTools.IO.Formatting.html": {
    "href": "api/ChartTools.IO.Formatting.html",
    "title": "Namespace ChartTools.IO.Formatting | ChartTools",
    "keywords": "Namespace ChartTools.IO.Formatting Classes FormattingRules Rules defined in song.ini that affect how the song data file is read and written Enums AlbumTrackKey CharterKey HopoFrequencyStep"
  },
  "api/ChartTools.IO.Ini.IniFile.html": {
    "href": "api/ChartTools.IO.Ini.IniFile.html",
    "title": "Class IniFile | ChartTools",
    "keywords": "Class IniFile Namespace ChartTools.IO.Ini Assembly ChartTools.dll Provides methods for reading and writing ini files public static class IniFile Inheritance object IniFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadMetadata(string, Metadata?) Reads the metadata from a file. public static Metadata ReadMetadata(string path, Metadata? existing = null) Parameters path string Path of the file to read existing Metadata Returns Metadata A new instance of Metadata if existing is null, otherwise the same reference. Exceptions ArgumentException ArgumentNullException FormatException LineException OutOfMemoryException ReadMetadataAsync(string, Metadata?, CancellationToken) Reads the metadata from a file. public static Task<Metadata> ReadMetadataAsync(string path, Metadata? existing = null, CancellationToken cancellationToken = default) Parameters path string Path of the file to read existing Metadata cancellationToken CancellationToken Returns Task<Metadata> A new instance of Metadata if existing is null, otherwise the same reference. Exceptions ArgumentException ArgumentNullException FormatException LineException OutOfMemoryException WriteMetadata(string, Metadata) Writes the metadata in a file. public static void WriteMetadata(string path, Metadata metadata) Parameters path string Path of the file to read metadata Metadata Metadata to write"
  },
  "api/ChartTools.IO.Ini.IniFormatting.html": {
    "href": "api/ChartTools.IO.Ini.IniFormatting.html",
    "title": "Class IniFormatting | ChartTools",
    "keywords": "Class IniFormatting Namespace ChartTools.IO.Ini Assembly ChartTools.dll public static class IniFormatting Inheritance object IniFormatting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Album public const string Album = \"album\" Field Value string AlbumTrack public const string AlbumTrack = \"album_track\" Field Value string Artist public const string Artist = \"artist\" Field Value string AudioOffset public const string AudioOffset = \"delay\" Field Value string BassDifficulty public const string BassDifficulty = \"diff_bass\" Field Value string Charter public const string Charter = \"charter\" Field Value string Difficulty public const string Difficulty = \"diff_band\" Field Value string DrumsDifficulty public const string DrumsDifficulty = \"diff_drums\" Field Value string ForceEightHopoFrequency public const string ForceEightHopoFrequency = \"eighthnote_hopo\" Field Value string Frets public const string Frets = \"frets\" Field Value string GHLBassDifficulty public const string GHLBassDifficulty = \"diff_bassghl\" Field Value string GHLGuitarDifficulty public const string GHLGuitarDifficulty = \"diff_guitarghl\" Field Value string Genre public const string Genre = \"genre\" Field Value string GuitarDifficulty public const string GuitarDifficulty = \"diff_guitar\" Field Value string Header public const string Header = \"[song]\" Field Value string HopoFrequency public const string HopoFrequency = \"hopo_frequency\" Field Value string HopoFrequencyStep public const string HopoFrequencyStep = \"hopofreq\" Field Value string Icon public const string Icon = \"icon\" Field Value string KeysDifficulty public const string KeysDifficulty = \"diff_keys\" Field Value string Length public const string Length = \"song_length\" Field Value string LoadingText public const string LoadingText = \"loading_text\" Field Value string Modchart public const string Modchart = \"modchart\" Field Value string MultiplierNote public const string MultiplierNote = \"multiplier_note\" Field Value string Playlist public const string Playlist = \"playlist\" Field Value string PlaylistTrack public const string PlaylistTrack = \"playlis_track\" Field Value string PreviewEnd public const string PreviewEnd = \"preview_end_time\" Field Value string PreviewStart public const string PreviewStart = \"preview_start_time\" Field Value string Rimshot public const string Rimshot = \"sysex_rimshot\" Field Value string StarPowerNote public const string StarPowerNote = \"star_power_note\" Field Value string SubPlaylist public const string SubPlaylist = \"sub_playlist\" Field Value string SustainCutoff public const string SustainCutoff = \"sustain_cutoff_threshold\" Field Value string SysExHighHat public const string SysExHighHat = \"sysex_high_hat_ctrl\" Field Value string SysExOpenBass public const string SysExOpenBass = \"sysex_open_bass\" Field Value string SysExProSlide public const string SysExProSlide = \"sysex_pro_slide\" Field Value string SysExSliders public const string SysExSliders = \"sysex_slider\" Field Value string Title public const string Title = \"name\" Field Value string Track public const string Track = \"track\" Field Value string VideoOffset public const string VideoOffset = \"video_start_time\" Field Value string Year public const string Year = \"year\" Field Value string Methods Line(string, string?) public static string Line(string key, string? value) Parameters key string value string Returns string"
  },
  "api/ChartTools.IO.Ini.IniKeySerializableAttribute.html": {
    "href": "api/ChartTools.IO.Ini.IniKeySerializableAttribute.html",
    "title": "Class IniKeySerializableAttribute | ChartTools",
    "keywords": "Class IniKeySerializableAttribute Namespace ChartTools.IO.Ini Assembly ChartTools.dll public class IniKeySerializableAttribute : KeySerializableAttribute Inheritance object Attribute KeySerializableAttribute IniKeySerializableAttribute Inherited Members KeySerializableAttribute.Key KeySerializableAttribute.GetSerializable<TAttribute>(object) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors IniKeySerializableAttribute(string) public IniKeySerializableAttribute(string key) Parameters key string Properties Format public override FileType Format { get; } Property Value FileType Methods GetSerializable(object) public static IEnumerable<(string key, string value)> GetSerializable(object source) Parameters source object Returns IEnumerable<(string key, string value)> GetValueString(object) protected override string GetValueString(object propValue) Parameters propValue object Returns string"
  },
  "api/ChartTools.IO.Ini.html": {
    "href": "api/ChartTools.IO.Ini.html",
    "title": "Namespace ChartTools.IO.Ini | ChartTools",
    "keywords": "Namespace ChartTools.IO.Ini Classes IniFile Provides methods for reading and writing ini files IniFormatting IniKeySerializableAttribute"
  },
  "api/ChartTools.IO.KeySerializableAttribute.html": {
    "href": "api/ChartTools.IO.KeySerializableAttribute.html",
    "title": "Class KeySerializableAttribute | ChartTools",
    "keywords": "Class KeySerializableAttribute Namespace ChartTools.IO Assembly ChartTools.dll public abstract class KeySerializableAttribute : Attribute Inheritance object Attribute KeySerializableAttribute Derived ChartKeySerializableAttribute IniKeySerializableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors KeySerializableAttribute(string) public KeySerializableAttribute(string key) Parameters key string Properties Format public abstract FileType Format { get; } Property Value FileType Key public string Key { get; } Property Value string Methods GetSerializable<TAttribute>(object) Generates groups of non-null property values and their serialization keys. protected static IEnumerable<(string key, string value)> GetSerializable<TAttribute>(object source) where TAttribute : KeySerializableAttribute Parameters source object Object containing the properties Returns IEnumerable<(string key, string value)> Type Parameters TAttribute GetValueString(object) protected abstract string GetValueString(object propValue) Parameters propValue object Returns string"
  },
  "api/ChartTools.IO.LineException.html": {
    "href": "api/ChartTools.IO.LineException.html",
    "title": "Class LineException | ChartTools",
    "keywords": "Class LineException Namespace ChartTools.IO Assembly ChartTools.dll public class LineException : FormatException, ISerializable Inheritance object Exception SystemException FormatException LineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors LineException(string, Exception) public LineException(string line, Exception innerException) Parameters line string innerException Exception Properties Line public string Line { get; } Property Value string"
  },
  "api/ChartTools.IO.ParseException.html": {
    "href": "api/ChartTools.IO.ParseException.html",
    "title": "Class ParseException | ChartTools",
    "keywords": "Class ParseException Namespace ChartTools.IO Assembly ChartTools.dll public class ParseException : FormatException, ISerializable Inheritance object Exception SystemException FormatException ParseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors ParseException(string?, string, Type) public ParseException(string? obj, string target, Type type) Parameters obj string target string type Type Properties Object public string? Object { get; } Property Value string Target public string Target { get; } Property Value string Type public Type Type { get; } Property Value Type"
  },
  "api/ChartTools.IO.Read-1.html": {
    "href": "api/ChartTools.IO.Read-1.html",
    "title": "Delegate Read<T> | ChartTools",
    "keywords": "Delegate Read<T> Namespace ChartTools.IO Assembly ChartTools.dll Read method that generates an object of the target type public delegate T Read<T>(string path) Parameters path string File path Returns T Type Parameters T Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.IO.SectionException.html": {
    "href": "api/ChartTools.IO.SectionException.html",
    "title": "Class SectionException | ChartTools",
    "keywords": "Class SectionException Namespace ChartTools.IO Assembly ChartTools.dll public class SectionException : Exception, ISerializable Inheritance object Exception SectionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors SectionException(string, Exception) public SectionException(string header, Exception innerException) Parameters header string innerException Exception Properties Header public string Header { get; } Property Value string Methods EarlyEnd(string) public static SectionException EarlyEnd(string header) Parameters header string Returns SectionException MissingRequired(string) public static SectionException MissingRequired(string header) Parameters header string Returns SectionException"
  },
  "api/ChartTools.IO.Sections.ReservedSectionHeader.html": {
    "href": "api/ChartTools.IO.Sections.ReservedSectionHeader.html",
    "title": "Struct ReservedSectionHeader | ChartTools",
    "keywords": "Struct ReservedSectionHeader Namespace ChartTools.IO.Sections Assembly ChartTools.dll public readonly struct ReservedSectionHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors ReservedSectionHeader(string, string) public ReservedSectionHeader(string header, string dataSource) Parameters header string dataSource string Properties DataSource public string DataSource { get; } Property Value string Header public string Header { get; } Property Value string"
  },
  "api/ChartTools.IO.Sections.ReservedSectionHeaderSet.html": {
    "href": "api/ChartTools.IO.Sections.ReservedSectionHeaderSet.html",
    "title": "Class ReservedSectionHeaderSet | ChartTools",
    "keywords": "Class ReservedSectionHeaderSet Namespace ChartTools.IO.Sections Assembly ChartTools.dll public class ReservedSectionHeaderSet : IEnumerable<ReservedSectionHeader>, IEnumerable Inheritance object ReservedSectionHeaderSet Implements IEnumerable<ReservedSectionHeader> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors ReservedSectionHeaderSet(IEnumerable<ReservedSectionHeader>) public ReservedSectionHeaderSet(IEnumerable<ReservedSectionHeader> headers) Parameters headers IEnumerable<ReservedSectionHeader> Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<ReservedSectionHeader> GetEnumerator() Returns IEnumerator<ReservedSectionHeader> An enumerator that can be used to iterate through the collection."
  },
  "api/ChartTools.IO.Sections.Section-1.html": {
    "href": "api/ChartTools.IO.Sections.Section-1.html",
    "title": "Class Section<T> | ChartTools",
    "keywords": "Class Section<T> Namespace ChartTools.IO.Sections Assembly ChartTools.dll public class Section<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters T Inheritance object List<T> Section<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) CollectionExtensions.BinarySearchIndex<T, TKey>(IList<T>, TKey, Func<T, TKey>, out bool) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors Section(string) public Section(string header) Parameters header string Properties Header public string Header { get; } Property Value string"
  },
  "api/ChartTools.IO.Sections.SectionSet-1.html": {
    "href": "api/ChartTools.IO.Sections.SectionSet-1.html",
    "title": "Class SectionSet<T> | ChartTools",
    "keywords": "Class SectionSet<T> Namespace ChartTools.IO.Sections Assembly ChartTools.dll public abstract class SectionSet<T> : IList<Section<T>>, ICollection<Section<T>>, IEnumerable<Section<T>>, IEnumerable Type Parameters T Inheritance object SectionSet<T> Implements IList<Section<T>> ICollection<Section<T>> IEnumerable<Section<T>> IEnumerable Derived ChartSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.AlternateBy<T, TKey>(IEnumerable<IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.Alternate<T>(IEnumerable<IEnumerable<T>>) CollectionExtensions.BinarySearchIndex<T, TKey>(IList<T>, TKey, Func<T, TKey>, out bool) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public Section<T> this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value Section<T> The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. ReservedHeaders public abstract ReservedSectionHeaderSet ReservedHeaders { get; } Property Value ReservedSectionHeaderSet Methods Add(Section<T>) Adds an item to the ICollection<T>. public void Add(Section<T> item) Parameters item Section<T> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(Section<T>) Determines whether the ICollection<T> contains a specific value. public bool Contains(Section<T> item) Parameters item Section<T> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(Section<T>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(Section<T>[] array, int arrayIndex) Parameters array Section<T>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. Get(string) public Section<T>? Get(string header) Parameters header string Returns Section<T> GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Section<T>> GetEnumerator() Returns IEnumerator<Section<T>> An enumerator that can be used to iterate through the collection. IndexOf(Section<T>) Determines the index of a specific item in the IList<T>. public int IndexOf(Section<T> item) Parameters item Section<T> The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Section<T>) Inserts an item to the IList<T> at the specified index. public void Insert(int index, Section<T> item) Parameters index int The zero-based index at which item should be inserted. item Section<T> The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(Section<T>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(Section<T> item) Parameters item Section<T> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/ChartTools.IO.Sections.html": {
    "href": "api/ChartTools.IO.Sections.html",
    "title": "Namespace ChartTools.IO.Sections | ChartTools",
    "keywords": "Namespace ChartTools.IO.Sections Classes ReservedSectionHeaderSet SectionSet<T> Section<T> Structs ReservedSectionHeader"
  },
  "api/ChartTools.IO.VoidRead.html": {
    "href": "api/ChartTools.IO.VoidRead.html",
    "title": "Delegate VoidRead | ChartTools",
    "keywords": "Delegate VoidRead Namespace ChartTools.IO Assembly ChartTools.dll Read method that returns no value. public delegate void VoidRead(string path) Parameters path string File path Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.IO.Write-1.html": {
    "href": "api/ChartTools.IO.Write-1.html",
    "title": "Delegate Write<T> | ChartTools",
    "keywords": "Delegate Write<T> Namespace ChartTools.IO Assembly ChartTools.dll Write method hat takes an object of a target type public delegate void Write<T>(string path, T content) Parameters path string File path content T Object to write Type Parameters T Target type Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[])"
  },
  "api/ChartTools.IO.html": {
    "href": "api/ChartTools.IO.html",
    "title": "Namespace ChartTools.IO | ChartTools",
    "keywords": "Namespace ChartTools.IO Classes DirectoryResult<T> EntryException KeySerializableAttribute LineException ParseException SectionException Delegates AsyncRead<T> Asynchronous read method that generates an object of the target type AsyncWrite<T> Write method hat takes an object of a target type Read<T> Read method that generates an object of the target type VoidRead Read method that returns no value. Write<T> Write method hat takes an object of a target type"
  },
  "api/ChartTools.IReadOnlyLongObject.html": {
    "href": "api/ChartTools.IReadOnlyLongObject.html",
    "title": "Interface IReadOnlyLongObject | ChartTools",
    "keywords": "Interface IReadOnlyLongObject Namespace ChartTools Assembly ChartTools.dll public interface IReadOnlyLongObject Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Length Length of the object in ticks uint Length { get; } Property Value uint"
  },
  "api/ChartTools.IReadOnlyTrackObject.html": {
    "href": "api/ChartTools.IReadOnlyTrackObject.html",
    "title": "Interface IReadOnlyTrackObject | ChartTools",
    "keywords": "Interface IReadOnlyTrackObject Namespace ChartTools Assembly ChartTools.dll Object located on a track public interface IReadOnlyTrackObject : IEquatable<IReadOnlyTrackObject> Inherited Members IEquatable<IReadOnlyTrackObject>.Equals(IReadOnlyTrackObject) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Position Tick number on the track. uint Position { get; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution."
  },
  "api/ChartTools.ITrackObject.html": {
    "href": "api/ChartTools.ITrackObject.html",
    "title": "Interface ITrackObject | ChartTools",
    "keywords": "Interface ITrackObject Namespace ChartTools Assembly ChartTools.dll Object located on a track public interface ITrackObject : IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inherited Members IEquatable<IReadOnlyTrackObject>.Equals(IReadOnlyTrackObject) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(ITrackObject, float) Properties Position Tick number on the track. uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution."
  },
  "api/ChartTools.Instrument-1.html": {
    "href": "api/ChartTools.Instrument-1.html",
    "title": "Class Instrument<TChord> | ChartTools",
    "keywords": "Class Instrument<TChord> Namespace ChartTools Assembly ChartTools.dll Set of tracks common to an instrument public abstract record Instrument<TChord> : Instrument, IEmptyVerifiable, IEquatable<Instrument>, IEquatable<Instrument<TChord>> where TChord : IChord Type Parameters TChord Inheritance object Instrument Instrument<TChord> Implements IEmptyVerifiable IEquatable<Instrument> IEquatable<Instrument<TChord>> Derived Drums GHLInstrument StandardInstrument Vocals Inherited Members Instrument.IsEmpty Instrument.InstrumentIdentity Instrument.InstrumentType Instrument.SpecialPhrases Instrument.GetDifficulty(InstrumentDifficultySet) Instrument.SetDifficulty(InstrumentDifficultySet, sbyte?) Instrument.GetIdentity() Instrument.ShareLocalEvents(TrackObjectSource) Instrument.ShareSpecial(TrackObjectSource) Instrument.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TempoRescaler.Rescale(Instrument, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Easy Easy track public Track<TChord>? Easy { get; set; } Property Value Track<TChord> Expert Expert track public Track<TChord>? Expert { get; set; } Property Value Track<TChord> Hard Hard track public Track<TChord>? Hard { get; set; } Property Value Track<TChord> Medium Medium track public Track<TChord>? Medium { get; set; } Property Value Track<TChord> Methods CreateTrack(Difficulty) Creates a track public override Track<TChord> CreateTrack(Difficulty difficulty) Parameters difficulty Difficulty Difficulty of the track Returns Track<TChord> GetEasy() protected override Track<TChord>? GetEasy() Returns Track<TChord> GetExistingTracks() Creates an array containing all tracks with data. public override IEnumerable<Track<TChord>> GetExistingTracks() Returns IEnumerable<Track<TChord>> GetExpert() protected override Track<TChord>? GetExpert() Returns Track<TChord> GetHard() protected override Track<TChord>? GetHard() Returns Track<TChord> GetMedium() protected override Track<TChord>? GetMedium() Returns Track<TChord> GetTrack(Difficulty) Gets the Track<TChord> that matches a Difficulty public override Track<TChord>? GetTrack(Difficulty difficulty) Parameters difficulty Difficulty Returns Track<TChord> GetTracks() Creates an array containing all tracks. public override Track<TChord>?[] GetTracks() Returns Track<TChord>[] RemoveTrack(Difficulty) Removes a track. public override bool RemoveTrack(Difficulty difficulty) Parameters difficulty Difficulty Difficulty of the target track Returns bool SetTrack(Track<TChord>) Sets a track for a given Difficulty. public Track<TChord> SetTrack(Track<TChord> track) Parameters track Track<TChord> Returns Track<TChord> Track instance assigned to the instrument. Changed made to the passed reference will not be reflected in the instrument. Exceptions ArgumentNullException UndefinedEnumException"
  },
  "api/ChartTools.Instrument.html": {
    "href": "api/ChartTools.Instrument.html",
    "title": "Class Instrument | ChartTools",
    "keywords": "Class Instrument Namespace ChartTools Assembly ChartTools.dll Base class for instruments public abstract record Instrument : IEmptyVerifiable, IEquatable<Instrument> Inheritance object Instrument Implements IEmptyVerifiable IEquatable<Instrument> Derived Instrument<TChord> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Instrument, float) Properties Easy Easy track public Track? Easy { get; } Property Value Track Expert Expert track public Track? Expert { get; } Property Value Track Hard Hard track public Track? Hard { get; } Property Value Track InstrumentIdentity Identity of the instrument the object belongs to public InstrumentIdentity InstrumentIdentity { get; } Property Value InstrumentIdentity InstrumentType Type of instrument public InstrumentType InstrumentType { get; } Property Value InstrumentType IsEmpty true if containing no data public bool IsEmpty { get; } Property Value bool Medium Medium track public Track? Medium { get; } Property Value Track SpecialPhrases Set of special phrases applied to all difficulties public List<InstrumentSpecialPhrase> SpecialPhrases { get; set; } Property Value List<InstrumentSpecialPhrase> Methods CreateTrack(Difficulty) Creates a track public abstract Track CreateTrack(Difficulty difficulty) Parameters difficulty Difficulty Difficulty of the track Returns Track GetDifficulty(InstrumentDifficultySet) Gets the difficulty for an InstrumentIdentity. public sbyte? GetDifficulty(InstrumentDifficultySet difficulties) Parameters difficulties InstrumentDifficultySet Returns sbyte? GetEasy() protected abstract Track? GetEasy() Returns Track GetExistingTracks() Creates an array containing all tracks with data. public virtual IEnumerable<Track> GetExistingTracks() Returns IEnumerable<Track> GetExpert() protected abstract Track? GetExpert() Returns Track GetHard() protected abstract Track? GetHard() Returns Track GetIdentity() protected abstract InstrumentIdentity GetIdentity() Returns InstrumentIdentity GetMedium() protected abstract Track? GetMedium() Returns Track GetTrack(Difficulty) Gets the track matching a difficulty. public abstract Track? GetTrack(Difficulty difficulty) Parameters difficulty Difficulty Returns Track GetTracks() Creates an array containing all tracks. public virtual Track?[] GetTracks() Returns Track[] RemoveTrack(Difficulty) Removes a track. public abstract bool RemoveTrack(Difficulty difficulty) Parameters difficulty Difficulty Difficulty of the target track Returns bool SetDifficulty(InstrumentDifficultySet, sbyte?) Gets the difficulty for an InstrumentIdentity. public void SetDifficulty(InstrumentDifficultySet difficulties, sbyte? difficulty) Parameters difficulties InstrumentDifficultySet difficulty sbyte? ShareLocalEvents(TrackObjectSource) Gives all tracks the same local events. public LocalEvent[] ShareLocalEvents(TrackObjectSource source) Parameters source TrackObjectSource Returns LocalEvent[] ShareSpecial(TrackObjectSource) Gives all tracks the same special phrases public SpecialPhrase[] ShareSpecial(TrackObjectSource source) Parameters source TrackObjectSource Returns SpecialPhrase[] ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ChartTools.InstrumentDifficultySet.html": {
    "href": "api/ChartTools.InstrumentDifficultySet.html",
    "title": "Class InstrumentDifficultySet | ChartTools",
    "keywords": "Class InstrumentDifficultySet Namespace ChartTools Assembly ChartTools.dll Stores the estimated difficulties for instruments public class InstrumentDifficultySet Inheritance object InstrumentDifficultySet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Bass Difficulty of Bass [IniKeySerializable(\"diff_bass\")] public sbyte? Bass { get; set; } Property Value sbyte? Drums Difficulty of Drums [IniKeySerializable(\"diff_drums\")] public sbyte? Drums { get; set; } Property Value sbyte? GHLBass Difficulty of GHLBass [IniKeySerializable(\"diff_bassghl\")] public sbyte? GHLBass { get; set; } Property Value sbyte? GHLGuitar Difficulty of GHLGuitar [IniKeySerializable(\"diff_guitarghl\")] public sbyte? GHLGuitar { get; set; } Property Value sbyte? Guitar Difficulty of LeadGuitar, CoopGuitar and RhythmGuitar [IniKeySerializable(\"diff_guitar\")] public sbyte? Guitar { get; set; } Property Value sbyte? Keys Difficulty of Keys [IniKeySerializable(\"diff_keys\")] public sbyte? Keys { get; set; } Property Value sbyte? Methods GetDifficulty(InstrumentIdentity) Gets the difficulty for an InstrumentIdentity. public sbyte? GetDifficulty(InstrumentIdentity identity) Parameters identity InstrumentIdentity Returns sbyte? SetDifficulty(InstrumentIdentity, sbyte?) Sets the difficulty for an InstrumentIdentity. public void SetDifficulty(InstrumentIdentity identity, sbyte? difficulty) Parameters identity InstrumentIdentity difficulty sbyte?"
  },
  "api/ChartTools.InstrumentIdentity.html": {
    "href": "api/ChartTools.InstrumentIdentity.html",
    "title": "Enum InstrumentIdentity | ChartTools",
    "keywords": "Enum InstrumentIdentity Namespace ChartTools Assembly ChartTools.dll All instruments public enum InstrumentIdentity : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Bass = 6 CoopGuitar = 5 Drums = 0 GHLBass = 2 GHLGuitar = 1 Keys = 7 LeadGuitar = 3 RhythmGuitar = 4 Vocals = 8"
  },
  "api/ChartTools.InstrumentSet.html": {
    "href": "api/ChartTools.InstrumentSet.html",
    "title": "Class InstrumentSet | ChartTools",
    "keywords": "Class InstrumentSet Namespace ChartTools Assembly ChartTools.dll Set of all instruments public class InstrumentSet : IEnumerable<Instrument>, IEnumerable Inheritance object InstrumentSet Implements IEnumerable<Instrument> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Properties Bass Set of bass tracks public StandardInstrument? Bass { get; set; } Property Value StandardInstrument CoopGuitar Set of coop guitar tracks public StandardInstrument? CoopGuitar { get; set; } Property Value StandardInstrument Drums Set of drums tracks public Drums? Drums { get; set; } Property Value Drums GHLBass Set of Guitar Hero Live bass tracks public GHLInstrument? GHLBass { get; set; } Property Value GHLInstrument GHLGuitar Set of Guitar Hero Live guitar tracks public GHLInstrument? GHLGuitar { get; set; } Property Value GHLInstrument Keys Set of keyboard tracks public StandardInstrument? Keys { get; set; } Property Value StandardInstrument LeadGuitar Set of lead guitar tracks public StandardInstrument? LeadGuitar { get; set; } Property Value StandardInstrument RhythmGuitar Set of rhythm guitar tracks public StandardInstrument? RhythmGuitar { get; set; } Property Value StandardInstrument Vocals public Vocals? Vocals { get; set; } Property Value Vocals Methods Existing() public IEnumerable<Instrument> Existing() Returns IEnumerable<Instrument> Get(GHLInstrumentIdentity) Gets property value for an Instrument<TChord> from a GHLInstrumentIdentity enum value. public GHLInstrument? Get(GHLInstrumentIdentity instrument) Parameters instrument GHLInstrumentIdentity Instrument to get Returns GHLInstrument Instance of Instrument<TChord> where TChord is GHLChord from the Song. Get(InstrumentIdentity) Gets property value for an Instrument from a InstrumentIdentity enum value. public Instrument? Get(InstrumentIdentity instrument) Parameters instrument InstrumentIdentity Instrument to get Returns Instrument Instance of Instrument from the Song Get(StandardInstrumentIdentity) Gets property value for an Instrument<TChord> from a StandardInstrumentIdentity enum value. public StandardInstrument? Get(StandardInstrumentIdentity instrument) Parameters instrument StandardInstrumentIdentity Instrument to get Returns StandardInstrument Instance of Instrument<TChord> where TChord is StandardChord from the Song. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Instrument> GetEnumerator() Returns IEnumerator<Instrument> An enumerator that can be used to iterate through the collection. Set(GHLInstrument) public void Set(GHLInstrument instrument) Parameters instrument GHLInstrument Set(StandardInstrument) public void Set(StandardInstrument instrument) Parameters instrument StandardInstrument"
  },
  "api/ChartTools.InstrumentSpecialPhrase.html": {
    "href": "api/ChartTools.InstrumentSpecialPhrase.html",
    "title": "Class InstrumentSpecialPhrase | ChartTools",
    "keywords": "Class InstrumentSpecialPhrase Namespace ChartTools Assembly ChartTools.dll Phrase related to an instrument that triggers an in-game event. public class InstrumentSpecialPhrase : SpecialPhrase, ILongTrackObject, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject>, ILongObject, IReadOnlyLongObject Inheritance object SpecialPhrase InstrumentSpecialPhrase Implements ILongTrackObject ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> ILongObject IReadOnlyLongObject Inherited Members SpecialPhrase.Position SpecialPhrase.TypeCode SpecialPhrase.Length object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) TempoRescaler.Rescale(ILongTrackObject, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors InstrumentSpecialPhrase(uint, InstrumentSpecialPhraseType, uint) Creates an instance of InstrumentSpecialPhrase. public InstrumentSpecialPhrase(uint position, InstrumentSpecialPhraseType type, uint length = 0) Parameters position uint Position of the phrase type InstrumentSpecialPhraseType Effect of the phrase length uint Duration in ticks InstrumentSpecialPhrase(uint, byte, uint) Creates an instance of InstrumentSpecialPhrase. Base constructor of special phrases. public InstrumentSpecialPhrase(uint position, byte typeCode, uint length = 0) Parameters position uint Position of the phrase typeCode byte Effect of the phrase length uint Duration in ticks Properties Type Type of the phrase that drives the gameplay effect public InstrumentSpecialPhraseType Type { get; set; } Property Value InstrumentSpecialPhraseType Methods Equals(TrackSpecialPhrase?) public bool Equals(TrackSpecialPhrase? other) Parameters other TrackSpecialPhrase Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/ChartTools.InstrumentSpecialPhraseType.html": {
    "href": "api/ChartTools.InstrumentSpecialPhraseType.html",
    "title": "Enum InstrumentSpecialPhraseType | ChartTools",
    "keywords": "Enum InstrumentSpecialPhraseType Namespace ChartTools Assembly ChartTools.dll Types of InstrumentSpecialPhrase public enum InstrumentSpecialPhraseType : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields BigRockEnding = 1 Unknown = 0"
  },
  "api/ChartTools.InstrumentType.html": {
    "href": "api/ChartTools.InstrumentType.html",
    "title": "Enum InstrumentType | ChartTools",
    "keywords": "Enum InstrumentType Namespace ChartTools Assembly ChartTools.dll public enum InstrumentType : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Drums = 0 GHL = 1 Standard = 2 Vocals = 3"
  },
  "api/ChartTools.LaneChord-3.html": {
    "href": "api/ChartTools.LaneChord-3.html",
    "title": "Class LaneChord<TNote, TLane, TModifiers> | ChartTools",
    "keywords": "Class LaneChord<TNote, TLane, TModifiers> Namespace ChartTools Assembly ChartTools.dll public abstract class LaneChord<TNote, TLane, TModifiers> : LaneChord, IChord, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> where TNote : LaneNote<TLane>, new() where TLane : struct, Enum where TModifiers : struct, Enum Type Parameters TNote TLane TModifiers Inheritance object LaneChord LaneChord<TNote, TLane, TModifiers> Implements IChord ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Derived DrumsChord GHLChord StandardChord Inherited Members LaneChord.Position LaneChord.OpenExclusivity LaneChord.GetNotes() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors LaneChord() public LaneChord() LaneChord(uint) public LaneChord(uint position) Parameters position uint Properties Modifiers public TModifiers Modifiers { get; set; } Property Value TModifiers Notes Notes in the chord public LaneNoteCollection<TNote, TLane> Notes { get; } Property Value LaneNoteCollection<TNote, TLane> Methods CreateNote(byte, uint) public override LaneNote CreateNote(byte index, uint sustain = 0) Parameters index byte sustain uint Returns LaneNote"
  },
  "api/ChartTools.LaneChord.html": {
    "href": "api/ChartTools.LaneChord.html",
    "title": "Class LaneChord | ChartTools",
    "keywords": "Class LaneChord Namespace ChartTools Assembly ChartTools.dll public abstract class LaneChord : IChord, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object LaneChord Implements IChord ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Derived LaneChord<TNote, TLane, TModifiers> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors LaneChord() public LaneChord() LaneChord(uint) public LaneChord(uint position) Parameters position uint Properties Notes public IReadOnlyCollection<LaneNote> Notes { get; } Property Value IReadOnlyCollection<LaneNote> OpenExclusivity Defines if open notes can be mixed with other notes for this chord type. true indicated open notes cannot be mixed. public abstract bool OpenExclusivity { get; } Property Value bool Position Tick number on the track. public uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution. Methods CreateNote(byte, uint) public abstract LaneNote CreateNote(byte index, uint sustain = 0) Parameters index byte sustain uint Returns LaneNote GetNotes() protected abstract IReadOnlyCollection<LaneNote> GetNotes() Returns IReadOnlyCollection<LaneNote>"
  },
  "api/ChartTools.LaneNote-1.html": {
    "href": "api/ChartTools.LaneNote-1.html",
    "title": "Class LaneNote<TLane> | ChartTools",
    "keywords": "Class LaneNote<TLane> Namespace ChartTools Assembly ChartTools.dll Base class for notes public class LaneNote<TLane> : LaneNote, INote, ILongObject, IReadOnlyLongObject where TLane : struct, Enum Type Parameters TLane Inheritance object LaneNote LaneNote<TLane> Implements INote ILongObject IReadOnlyLongObject Derived DrumsNote Inherited Members LaneNote.Sustain object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors LaneNote() public LaneNote() LaneNote(TLane, uint) public LaneNote(TLane lane, uint sustain = 0) Parameters lane TLane sustain uint Properties Index Numerical value of the note identity public override byte Index { get; } Property Value byte Lane public TLane Lane { get; init; } Property Value TLane"
  },
  "api/ChartTools.LaneNote.html": {
    "href": "api/ChartTools.LaneNote.html",
    "title": "Class LaneNote | ChartTools",
    "keywords": "Class LaneNote Namespace ChartTools Assembly ChartTools.dll public abstract class LaneNote : INote, ILongObject, IReadOnlyLongObject Inheritance object LaneNote Implements INote ILongObject IReadOnlyLongObject Derived LaneNote<TLane> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Index Numerical value of the note identity public abstract byte Index { get; } Property Value byte Sustain Maximum length the note can be held for extra points public uint Sustain { get; set; } Property Value uint"
  },
  "api/ChartTools.LaneNoteCollection-2.html": {
    "href": "api/ChartTools.LaneNoteCollection-2.html",
    "title": "Class LaneNoteCollection<TNote, TLane> | ChartTools",
    "keywords": "Class LaneNoteCollection<TNote, TLane> Namespace ChartTools Assembly ChartTools.dll public class LaneNoteCollection<TNote, TLane> : ICollection<TNote>, IReadOnlyList<TNote>, IReadOnlyCollection<TNote>, IEnumerable<TNote>, IEnumerable where TNote : LaneNote<TLane>, new() where TLane : struct, Enum Type Parameters TNote TLane Inheritance object LaneNoteCollection<TNote, TLane> Implements ICollection<TNote> IReadOnlyList<TNote> IReadOnlyCollection<TNote> IEnumerable<TNote> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Constructors LaneNoteCollection(bool) public LaneNoteCollection(bool openExclusivity) Parameters openExclusivity bool Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. this[int] Gets the note at a given index based on order or addition. public TNote this[int index] { get; } Parameters index int Index of the note in the collection, not to be confused with Index. Property Value TNote Note at the index Exceptions ArgumentOutOfRangeException this[TLane] Gets the note matching a given lane. public TNote? this[TLane lane] { get; } Parameters lane TLane Lane of the note Property Value TNote Note with the lane if present, otherwise null. OpenExclusivity If true, trying to combine an open note with other notes will remove the current ones. public bool OpenExclusivity { get; } Property Value bool Methods Add(TNote) Adds a note to the LaneNoteCollection<TNote, TLane>. public void Add(TNote note) Parameters note TNote Note to add Remarks Adding a note that already exists will overwrite the existing note. If OpenExclusivity is true, combining an open note with other notes will remove the current ones. Add(TLane) public void Add(TLane lane) Parameters lane TLane Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(byte) Determines if any note matches a given index. public bool Contains(byte index) Parameters index byte Returns bool Contains(TNote) Determines if any note matches the lane of a given note. public bool Contains(TNote note) Parameters note TNote Returns bool Exceptions ArgumentNullException Contains(TLane) Determines if any note matches a given lane. public bool Contains(TLane lane) Parameters lane TLane Returns bool CopyTo(TNote[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(TNote[] array, int arrayIndex) Parameters array TNote[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TNote> GetEnumerator() Returns IEnumerator<TNote> An enumerator that can be used to iterate through the collection. Remove(byte) Removes the note that matches a given index. public bool Remove(byte index) Parameters index byte Returns bool true if a matching note was found. Remove(TNote) Removes the note that matches the lane of a given note. public bool Remove(TNote note) Parameters note TNote Returns bool true if a matching note was found. Remove(TLane) Removes the note that matches a given lane. public bool Remove(TLane lane) Parameters lane TLane Returns bool true if a matching note was found."
  },
  "api/ChartTools.Lyrics.Phrase.html": {
    "href": "api/ChartTools.Lyrics.Phrase.html",
    "title": "Class Phrase | ChartTools",
    "keywords": "Class Phrase Namespace ChartTools.Lyrics Assembly ChartTools.dll public class Phrase : TrackObjectBase, IChord, ILongTrackObject, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject>, ILongObject, IReadOnlyLongObject Inheritance object TrackObjectBase Phrase Implements IChord ILongTrackObject ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> ILongObject IReadOnlyLongObject Inherited Members TrackObjectBase.Position object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ILongObject, float) TempoRescaler.Rescale(ILongTrackObject, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors Phrase(uint) public Phrase(uint position) Parameters position uint Properties DisplayedText public string DisplayedText { get; } Property Value string EndPosition End of the phrase as defined by Length public uint EndPosition { get; } Property Value uint Length Length of the object in ticks public uint Length { get; } Property Value uint LengthOverride public uint? LengthOverride { get; set; } Property Value uint? RawText Gets the raw text of all syllables as a single string with spaces between syllables public string RawText { get; } Property Value string SyllableEndOffset Offset of the end of the last syllable public uint SyllableEndOffset { get; } Property Value uint SyllableEndPosition End position of the last syllable public uint SyllableEndPosition { get; } Property Value uint SyllableStartOffset Offset of the first syllable public uint SyllableStartOffset { get; } Property Value uint SyllableStartPosition Start position of the first syllable public uint SyllableStartPosition { get; } Property Value uint Syllables public List<Syllable> Syllables { get; } Property Value List<Syllable> Methods ToGlobalEvents() public IEnumerable<GlobalEvent> ToGlobalEvents() Returns IEnumerable<GlobalEvent>"
  },
  "api/ChartTools.Lyrics.PhraseExtensions.html": {
    "href": "api/ChartTools.Lyrics.PhraseExtensions.html",
    "title": "Class PhraseExtensions | ChartTools",
    "keywords": "Class PhraseExtensions Namespace ChartTools.Lyrics Assembly ChartTools.dll Provides additional methods to Phrase public static class PhraseExtensions Inheritance object PhraseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToGlobalEvents(IEnumerable<Phrase>) Converts a set of Phrase to a set of GlobalEvent making up the phrases. public static IEnumerable<GlobalEvent> ToGlobalEvents(this IEnumerable<Phrase> source) Parameters source IEnumerable<Phrase> Phrases to convert into global events Returns IEnumerable<GlobalEvent> Global events making up the phrases"
  },
  "api/ChartTools.Lyrics.Syllable.html": {
    "href": "api/ChartTools.Lyrics.Syllable.html",
    "title": "Class Syllable | ChartTools",
    "keywords": "Class Syllable Namespace ChartTools.Lyrics Assembly ChartTools.dll Karaoke step of a Phrase public class Syllable : INote, ILongObject, IReadOnlyLongObject Inheritance object Syllable Implements INote ILongObject IReadOnlyLongObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors Syllable(uint) public Syllable(uint offset) Parameters offset uint Syllable(uint, VocalsPitch) public Syllable(uint offset, VocalsPitch pitch) Parameters offset uint pitch VocalsPitch Properties DisplayedText Text formatted to its in-game appearance public string DisplayedText { get; } Property Value string EndPositionOffset Position offset of the end from the Phrase public uint EndPositionOffset { get; } Property Value uint Index Numerical value of the note identity public byte Index { get; } Property Value byte IsWordEnd true if is the last syllable or the only syllable of its word public bool IsWordEnd { get; set; } Property Value bool Length Duration of the syllable in ticks public uint Length { get; set; } Property Value uint Pitch Pitch to sing public VocalsPitch Pitch { get; set; } Property Value VocalsPitch Remarks Although the octave is specified, some games only require the player to match the key. Chart files do not support pitches. PositionOffset Position offset from the Phrase public uint PositionOffset { get; set; } Property Value uint RawText Unformatted text data public string RawText { get; set; } Property Value string Remarks Setting to null will set to an empty string."
  },
  "api/ChartTools.Lyrics.VocalPitchValue.html": {
    "href": "api/ChartTools.Lyrics.VocalPitchValue.html",
    "title": "Enum VocalPitchValue | ChartTools",
    "keywords": "Enum VocalPitchValue Namespace ChartTools.Lyrics Assembly ChartTools.dll Pitch values for VocalsPitch public enum VocalPitchValue : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields A2 = 41 Second A A3 = 57 Third A A4 = 73 Fourth A A5 = 89 Fifth A B2 = 43 Second B B3 = 59 Third B B4 = 75 Fourth B B5 = 91 Fifth B Bb2 = 42 Second B-flat Bb3 = 58 Third B-flat Bb4 = 74 Fourth B-flat Bb5 = 90 Fifth B-flat C2 = 32 Second C (lowest pitch) C3 = 48 Third C C4 = 64 Third C C5 = 80 Fifth C6 = 96 Sixth C (highest pitch) CSharp2 = 33 Second C# CSharp3 = 49 Third C# CSharp4 = 65 Fourth C# CSharp5 = 81 Fifth C# D2 = 34 Second D D3 = 50 Third D D4 = 66 Fourth D D5 = 82 Fifth D E2 = 36 Second E E3 = 52 Third E E4 = 68 Fourth E E5 = 84 Fifth E Eb2 = 35 Second E-flat Eb3 = 51 Third E-flat Eb4 = 67 Fourth E-flat Eb5 = 83 Fifth E-flat F2 = 37 Second F F3 = 53 Third F F4 = 69 Fourth F F5 = 85 Fifth F FSharp2 = 38 Second F# FSharp3 = 54 Third F# FSharp4 = 70 Fourth F# FSharp5 = 86 Fifth F# G2 = 39 Second G G3 = 55 Third G G4 = 71 Fourth G G5 = 87 Fifth G GSharp2 = 40 Second G# GSharp3 = 56 Third G# GSharp4 = 72 Fourth G# GSharp5 = 88 Fifth G# None = 0 No pitch"
  },
  "api/ChartTools.Lyrics.VocalsKey.html": {
    "href": "api/ChartTools.Lyrics.VocalsKey.html",
    "title": "Enum VocalsKey | ChartTools",
    "keywords": "Enum VocalsKey Namespace ChartTools.Lyrics Assembly ChartTools.dll Keys making up VocalPitchValue without the octave public enum VocalsKey : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields A = 9 A key (La) B = 11 B key (Si) Bb = 10 B-flat key C = 0 C key (Do) CSharp = 1 C# key D = 2 D key (Ré) E = 4 E key (Mi) Eb = 3 E-flat key F = 5 F key (Fa) FSharp = 6 F# key G = 7 G key (Sol) GSharp = 8 G# key"
  },
  "api/ChartTools.Lyrics.VocalsPitch.html": {
    "href": "api/ChartTools.Lyrics.VocalsPitch.html",
    "title": "Struct VocalsPitch | ChartTools",
    "keywords": "Struct VocalsPitch Namespace ChartTools.Lyrics Assembly ChartTools.dll Wrapper type for VocalPitchValue with helper properties to get the pitch and key public readonly struct VocalsPitch : IEquatable<VocalsPitch>, IEquatable<VocalPitchValue> Implements IEquatable<VocalsPitch> IEquatable<VocalPitchValue> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors VocalsPitch(VocalPitchValue) Creates a pitch from a raw pitch value. public VocalsPitch(VocalPitchValue value) Parameters value VocalPitchValue Properties Key Key excluding the octave public VocalsKey Key { get; } Property Value VocalsKey Octave Octave number public byte Octave { get; } Property Value byte Value Pitch value public VocalPitchValue Value { get; } Property Value VocalPitchValue Methods Equals(VocalPitchValue) Indicates if a pitch has a value equal to a raw pitch value. public bool Equals(VocalPitchValue other) Parameters other VocalPitchValue Value to compare Returns bool Equals(VocalsPitch) Indicates if two pitches have the same value. public bool Equals(VocalsPitch other) Parameters other VocalsPitch Pitch to compare Returns bool Equals(object?) Indicates if an object is a raw pitch value or wrapper and the value is equal. public override bool Equals(object? obj) Parameters obj object Source of value Returns bool GetHashCode() Returns the hash code for the pitch value. public override int GetHashCode() Returns int Operators operator ==(VocalsPitch, VocalsPitch) Indicates if two pitches have the same value. public static bool operator ==(VocalsPitch left, VocalsPitch right) Parameters left VocalsPitch right VocalsPitch Returns bool operator >(VocalsPitch, VocalsPitch) Indicates if the left pitch has a higher value than the right pitch according to music theory. public static bool operator >(VocalsPitch left, VocalsPitch right) Parameters left VocalsPitch right VocalsPitch Returns bool implicit operator VocalsPitch(VocalPitchValue) Converts a raw pitch value to a matching wrapper. public static implicit operator VocalsPitch(VocalPitchValue pitch) Parameters pitch VocalPitchValue Pitch value Returns VocalsPitch operator !=(VocalsPitch, VocalsPitch) Indicates if two pitches don't have the same value. public static bool operator !=(VocalsPitch left, VocalsPitch right) Parameters left VocalsPitch right VocalsPitch Returns bool operator <(VocalsPitch, VocalsPitch) Indicates if the left pitch has a lower value than the right pitch according to music theory. public static bool operator <(VocalsPitch left, VocalsPitch right) Parameters left VocalsPitch right VocalsPitch Returns bool"
  },
  "api/ChartTools.Lyrics.html": {
    "href": "api/ChartTools.Lyrics.html",
    "title": "Namespace ChartTools.Lyrics | ChartTools",
    "keywords": "Namespace ChartTools.Lyrics Classes Phrase PhraseExtensions Provides additional methods to Phrase Syllable Karaoke step of a Phrase Structs VocalsPitch Wrapper type for VocalPitchValue with helper properties to get the pitch and key Enums VocalPitchValue Pitch values for VocalsPitch VocalsKey Keys making up VocalPitchValue without the octave"
  },
  "api/ChartTools.Metadata.html": {
    "href": "api/ChartTools.Metadata.html",
    "title": "Class Metadata | ChartTools",
    "keywords": "Class Metadata Namespace ChartTools Assembly ChartTools.dll Set of miscellaneous information about a Song public class Metadata Inheritance object Metadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Album Album featuring the Song [ChartKeySerializable(\"Album\")] [IniKeySerializable(\"album\")] public string? Album { get; set; } Property Value string AlbumTrack Track number of the song within the album public ushort? AlbumTrack { get; set; } Property Value ushort? Artist Artist or band behind the Song [ChartKeySerializable(\"Artist\")] [IniKeySerializable(\"artist\")] public string? Artist { get; set; } Property Value string AudioOffset Offset of the audio track. A higher value makes the audio start sooner. [ChartKeySerializable(\"Offset\")] [IniKeySerializable(\"delay\")] public TimeSpan? AudioOffset { get; set; } Property Value TimeSpan? Charter Creator of the chart public Charter Charter { get; set; } Property Value Charter Difficulty Overall difficulty of the song [ChartKeySerializable(\"Difficulty\")] [IniKeySerializable(\"diff_band\")] public sbyte? Difficulty { get; set; } Property Value sbyte? Formatting Rules defined in song.ini that affect how the song data file is read and written public FormattingRules Formatting { get; set; } Property Value FormattingRules Remarks Property summaries provided by Nathan Hurst. Genre Genre of the Song [ChartKeySerializable(\"Genre\")] [IniKeySerializable(\"genre\")] public string? Genre { get; set; } Property Value string InstrumentDifficulties Stores the estimated difficulties for instruments public InstrumentDifficultySet InstrumentDifficulties { get; set; } Property Value InstrumentDifficultySet IsModchart The song is a modchart [IniKeySerializable(\"modchart\")] public bool IsModchart { get; set; } Property Value bool Length Length of the song in milliseconds [IniKeySerializable(\"song_length\")] public uint? Length { get; set; } Property Value uint? LoadingText Text to be displayed on the load screen [IniKeySerializable(\"loading_text\")] public string? LoadingText { get; set; } Property Value string MediaType Type of media the audio track comes from [ChartKeySerializable(\"MediaType\")] public string? MediaType { get; set; } Property Value string Playlist Playlist that the song should show up in [IniKeySerializable(\"playlist\")] public string? Playlist { get; set; } Property Value string PlaylistTrack Track number of the song within the playlist/setlist [IniKeySerializable(\"playlis_track\")] public ushort? PlaylistTrack { get; set; } Property Value ushort? PreviewEnd End time in milliseconds of the preview in the Clone Hero song browser [ChartKeySerializable(\"PreviewEnd\")] [IniKeySerializable(\"preview_end_time\")] public uint? PreviewEnd { get; set; } Property Value uint? PreviewLength Duration in milliseconds of the preview in the Clone Hero song browser public uint PreviewLength { get; } Property Value uint PreviewStart Start time in milliseconds of the preview in the Clone Hero song browser [ChartKeySerializable(\"PreviewStart\")] [IniKeySerializable(\"preview_start_time\")] public uint? PreviewStart { get; set; } Property Value uint? Streams Paths of audio files public StreamCollection Streams { get; set; } Property Value StreamCollection SubPlaylist Sub-playlist that the song should show up in [IniKeySerializable(\"sub_playlist\")] public string? SubPlaylist { get; set; } Property Value string Title Title of the Song [ChartKeySerializable(\"Name\")] [IniKeySerializable(\"name\")] public string? Title { get; set; } Property Value string UnidentifiedData Unrecognized metadata public HashSet<UnidentifiedMetadata> UnidentifiedData { get; } Property Value HashSet<UnidentifiedMetadata> Remarks When writing, these will only be written if the target format matches the origin VideoOffset Offset of the background video. A higher value makes the video start sooner. public TimeSpan? VideoOffset { get; set; } Property Value TimeSpan? Year Year of release [IniKeySerializable(\"year\")] public ushort? Year { get; set; } Property Value ushort? Methods FromFile(string) Reads the metadata from a file. public static Metadata FromFile(string path) Parameters path string Path of the file to read Returns Metadata Exceptions ArgumentException ArgumentNullException FormatException LineException OutOfMemoryException FromFiles(params string[]) Reads the metadata from multiple files. public static Metadata? FromFiles(params string[] paths) Parameters paths string[] Paths of the files to read Returns Metadata Remarks Each file has less priority than the preceding. Exceptions ArgumentException ArgumentNullException FormatException IOException OutOfMemoryException ReadFile(string) public void ReadFile(string path) Parameters path string ToFile(string) public void ToFile(string path) Parameters path string"
  },
  "api/ChartTools.MidiInstrumentOrigin.html": {
    "href": "api/ChartTools.MidiInstrumentOrigin.html",
    "title": "Enum MidiInstrumentOrigin | ChartTools",
    "keywords": "Enum MidiInstrumentOrigin Namespace ChartTools Assembly ChartTools.dll Origins of an instrument public enum MidiInstrumentOrigin : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields GuitarHero1 = 2 GuitarHero2 = 4 GuitarHero2Uncertain = 5 NA = 0 RockBand = 6 RockBandUncertain = 7 Unknown = 1"
  },
  "api/ChartTools.Song.html": {
    "href": "api/ChartTools.Song.html",
    "title": "Class Song | ChartTools",
    "keywords": "Class Song Namespace ChartTools Assembly ChartTools.dll Song playable in Clone Hero public class Song Inheritance object Song Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Song, float) Properties Formatting Rules defined in song.ini that affect how the song data file is read and written public FormattingRules Formatting { get; set; } Property Value FormattingRules Remarks Property summaries provided by Nathan Hurst. GlobalEvents List of events common to all instruments public List<GlobalEvent> GlobalEvents { get; set; } Property Value List<GlobalEvent> Instruments Set of all instruments public InstrumentSet Instruments { get; set; } Property Value InstrumentSet Metadata Set of information about the song not unrelated to instruments, syncing or events public Metadata Metadata { get; set; } Property Value Metadata SyncTrack Set of markers that define the time signature and tempo public SyncTrack SyncTrack { get; set; } Property Value SyncTrack UnknownChartSections public ChartSection? UnknownChartSections { get; set; } Property Value ChartSection Methods FromDirectory(string, ReadingConfiguration?) public static Song FromDirectory(string directory, ReadingConfiguration? config = null) Parameters directory string config ReadingConfiguration Returns Song FromDirectoryAsync(string, ReadingConfiguration?, CancellationToken) public static Task<Song> FromDirectoryAsync(string directory, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters directory string config ReadingConfiguration cancellationToken CancellationToken Returns Task<Song> FromFile(string, ReadingConfiguration?, FormattingRules?) Reads all elements of a Song from a file. public static Song FromFile(string path, ReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string Path of the file config ReadingConfiguration formatting FormattingRules Rules defined in song.ini that affect how the song data file is read and written Returns Song FromFileAsync(string, ChartReadingConfiguration?, FormattingRules?, CancellationToken) Reads all elements of a Song from a file asynchronously using multitasking. public static Task<Song> FromFileAsync(string path, ChartReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string Path of the file config ChartReadingConfiguration formatting FormattingRules Rules defined in song.ini that affect how the song data file is read and written cancellationToken CancellationToken Token to request cancellation Returns Task<Song> GetLyrics() Retrieves the lyrics from the global events. public IEnumerable<Phrase> GetLyrics() Returns IEnumerable<Phrase> SetLyrics(IEnumerable<Phrase>) Replaces phrase and lyric events from GlobalEvents with the ones making up a set of Phrase. public void SetLyrics(IEnumerable<Phrase> phrases) Parameters phrases IEnumerable<Phrase> Phrases to use as a replacement ToFile(string, WritingConfiguration?) Writes the Song to a file. public void ToFile(string path, WritingConfiguration? config = null) Parameters path string config WritingConfiguration Exceptions ArgumentException ArgumentNullException PathTooLongException DirectoryNotFoundException LineException UnauthorizedAccessException NotSupportedException SecurityException ToFileAsync(string, WritingConfiguration?, CancellationToken) public Task ToFileAsync(string path, WritingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string config WritingConfiguration cancellationToken CancellationToken Returns Task"
  },
  "api/ChartTools.SpecialPhrase.html": {
    "href": "api/ChartTools.SpecialPhrase.html",
    "title": "Class SpecialPhrase | ChartTools",
    "keywords": "Class SpecialPhrase Namespace ChartTools Assembly ChartTools.dll Base class for phrases that define an in-game event with a duration such as star power. public abstract class SpecialPhrase : ILongTrackObject, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject>, ILongObject, IReadOnlyLongObject Inheritance object SpecialPhrase Implements ILongTrackObject ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> ILongObject IReadOnlyLongObject Derived InstrumentSpecialPhrase TrackSpecialPhrase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) TempoRescaler.Rescale(ILongTrackObject, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors SpecialPhrase(uint, byte, uint) Base constructor of special phrases. public SpecialPhrase(uint position, byte typeCode, uint length = 0) Parameters position uint Position of the phrase typeCode byte Effect of the phrase length uint Duration in ticks Properties Length Duration of the phrase in ticks public uint Length { get; set; } Property Value uint Position Tick number on the track. public uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution. TypeCode Numerical value of the phrase type public byte TypeCode { get; set; } Property Value byte"
  },
  "api/ChartTools.StandardChord.html": {
    "href": "api/ChartTools.StandardChord.html",
    "title": "Class StandardChord | ChartTools",
    "keywords": "Class StandardChord Namespace ChartTools Assembly ChartTools.dll Set of notes played simultaneously by a standard five-fret instrument public class StandardChord : LaneChord<LaneNote<StandardLane>, StandardLane, StandardChordModifiers>, IChord, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object LaneChord LaneChord<LaneNote<StandardLane>, StandardLane, StandardChordModifiers> StandardChord Implements IChord ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members LaneChord<LaneNote<StandardLane>, StandardLane, StandardChordModifiers>.Notes LaneChord<LaneNote<StandardLane>, StandardLane, StandardChordModifiers>.Modifiers LaneChord<LaneNote<StandardLane>, StandardLane, StandardChordModifiers>.CreateNote(byte, uint) LaneChord.Position LaneChord.Notes LaneChord.CreateNote(byte, uint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(IChord, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors StandardChord() public StandardChord() StandardChord(uint) public StandardChord(uint position) Parameters position uint StandardChord(uint, params LaneNote<StandardLane>[]) public StandardChord(uint position, params LaneNote<StandardLane>[] notes) Parameters position uint notes LaneNote<StandardLane>[] Notes to add StandardChord(uint, params StandardLane[]) public StandardChord(uint position, params StandardLane[] notes) Parameters position uint notes StandardLane[] Notes to add Properties OpenExclusivity Defines if open notes can be mixed with other notes for this chord type. true indicated open notes cannot be mixed. public override bool OpenExclusivity { get; } Property Value bool Methods GetNotes() protected override IReadOnlyCollection<LaneNote> GetNotes() Returns IReadOnlyCollection<LaneNote>"
  },
  "api/ChartTools.StandardChordModifiers.html": {
    "href": "api/ChartTools.StandardChordModifiers.html",
    "title": "Enum StandardChordModifiers | ChartTools",
    "keywords": "Enum StandardChordModifiers Namespace ChartTools Assembly ChartTools.dll Modifier that affects how a StandardChord can be played [Flags] public enum StandardChordModifiers : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Big = 8 ExplicitHopo = 1 The Hopo state is not relative to the previous chord. ForcedHopo = ExplicitHopo | HopoInvert ForcedStrum = 1 HopoInvert = 2 Forced Hopo if ExplicitHopo is set, otherwise inverts the natural state relative to the previous chord None = 0 No modifier Tap = 4 The chord can be played without strumming"
  },
  "api/ChartTools.StandardInstrument.html": {
    "href": "api/ChartTools.StandardInstrument.html",
    "title": "Class StandardInstrument | ChartTools",
    "keywords": "Class StandardInstrument Namespace ChartTools Assembly ChartTools.dll public record StandardInstrument : Instrument<StandardChord>, IEmptyVerifiable, IEquatable<Instrument>, IEquatable<Instrument<StandardChord>>, IEquatable<StandardInstrument> Inheritance object Instrument Instrument<StandardChord> StandardInstrument Implements IEmptyVerifiable IEquatable<Instrument> IEquatable<Instrument<StandardChord>> IEquatable<StandardInstrument> Inherited Members Instrument<StandardChord>.Easy Instrument<StandardChord>.Medium Instrument<StandardChord>.Hard Instrument<StandardChord>.Expert Instrument<StandardChord>.GetTrack(Difficulty) Instrument<StandardChord>.CreateTrack(Difficulty) Instrument<StandardChord>.RemoveTrack(Difficulty) Instrument<StandardChord>.GetEasy() Instrument<StandardChord>.GetMedium() Instrument<StandardChord>.GetHard() Instrument<StandardChord>.GetExpert() Instrument<StandardChord>.GetTracks() Instrument<StandardChord>.GetExistingTracks() Instrument<StandardChord>.SetTrack(Track<StandardChord>) Instrument.IsEmpty Instrument.InstrumentType Instrument.SpecialPhrases Instrument.GetDifficulty(InstrumentDifficultySet) Instrument.SetDifficulty(InstrumentDifficultySet, sbyte?) Instrument.ShareLocalEvents(TrackObjectSource) Instrument.ShareSpecial(TrackObjectSource) Instrument.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TempoRescaler.Rescale(Instrument, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors StandardInstrument() public StandardInstrument() StandardInstrument(StandardInstrumentIdentity) public StandardInstrument(StandardInstrumentIdentity identity) Parameters identity StandardInstrumentIdentity Properties InstrumentIdentity public StandardInstrumentIdentity InstrumentIdentity { get; init; } Property Value StandardInstrumentIdentity MidiOrigin Format of lead guitar and bass. Not applicable to other instruments. public MidiInstrumentOrigin MidiOrigin { get; set; } Property Value MidiInstrumentOrigin Methods GetIdentity() protected override InstrumentIdentity GetIdentity() Returns InstrumentIdentity"
  },
  "api/ChartTools.StandardInstrumentIdentity.html": {
    "href": "api/ChartTools.StandardInstrumentIdentity.html",
    "title": "Enum StandardInstrumentIdentity | ChartTools",
    "keywords": "Enum StandardInstrumentIdentity Namespace ChartTools Assembly ChartTools.dll Standard five-fret instruments public enum StandardInstrumentIdentity : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Bass = 6 CoopGuitar = 5 Keys = 7 LeadGuitar = 3 RhythmGuitar = 4 Remarks Casting to InstrumentIdentity will match the instrument."
  },
  "api/ChartTools.StandardLane.html": {
    "href": "api/ChartTools.StandardLane.html",
    "title": "Enum StandardLane | ChartTools",
    "keywords": "Enum StandardLane Namespace ChartTools Assembly ChartTools.dll Frets for a standard note public enum StandardLane : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields Blue = 4 Green = 1 Open = 0 Orange = 5 Red = 2 Yellow = 3"
  },
  "api/ChartTools.StreamCollection.html": {
    "href": "api/ChartTools.StreamCollection.html",
    "title": "Class StreamCollection | ChartTools",
    "keywords": "Class StreamCollection Namespace ChartTools Assembly ChartTools.dll Set of audio files to play and mute during gameplay public class StreamCollection Inheritance object StreamCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Remarks Instrument audio may be muted when chords of the respective instrument are missed Properties Bass Location of the bass audio [ChartKeySerializable(\"BassStream\")] public string? Bass { get; set; } Property Value string Crowd Location of the crowd reaction audio file [ChartKeySerializable(\"CrowdStream\")] public string? Crowd { get; set; } Property Value string Drum Location of the drums' kicks audio file [ChartKeySerializable(\"DrumStream\")] public string? Drum { get; set; } Property Value string Remarks Can include all drums audio Drum2 Location of the drums' snares audio file [ChartKeySerializable(\"Drum2Stream\")] public string? Drum2 { get; set; } Property Value string Remarks Can include all drums audio except kicks Drum3 Location of the drum's toms audio file [ChartKeySerializable(\"Drum3Stream\")] public string? Drum3 { get; set; } Property Value string Remarks Can include toms and cymbals Drum4 Location of the drum's cymbals audio file [ChartKeySerializable(\"Drum4Stream\")] public string? Drum4 { get; set; } Property Value string Guitar Location of the guitar audio file [ChartKeySerializable(\"GuitarStream\")] public string? Guitar { get; set; } Property Value string Keys Location of the keys audio file [ChartKeySerializable(\"KeysStream\")] public string? Keys { get; set; } Property Value string Music Location of the base audio file [ChartKeySerializable(\"MusicStream\")] public string? Music { get; set; } Property Value string Rhythm Location of the rhythm guitar audio file [ChartKeySerializable(\"RhythmStream\")] public string? Rhythm { get; set; } Property Value string Vocals Location of the vocals audio file [ChartKeySerializable(\"VocalStream\")] public string? Vocals { get; set; } Property Value string"
  },
  "api/ChartTools.SyncTrack.html": {
    "href": "api/ChartTools.SyncTrack.html",
    "title": "Class SyncTrack | ChartTools",
    "keywords": "Class SyncTrack Namespace ChartTools Assembly ChartTools.dll Set of markers that define the time signature and tempo public class SyncTrack : IEmptyVerifiable Inheritance object SyncTrack Implements IEmptyVerifiable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(SyncTrack, float) Properties IsEmpty true if containing no data public bool IsEmpty { get; } Property Value bool Tempo Tempo markers public TempoMap Tempo { get; } Property Value TempoMap TimeSignatures Time signature markers public List<TimeSignature> TimeSignatures { get; } Property Value List<TimeSignature> Methods FromFile(string, ReadingConfiguration?) Reads a SyncTrack from a file. public static SyncTrack FromFile(string path, ReadingConfiguration? config = null) Parameters path string Path of the file config ReadingConfiguration Returns SyncTrack FromFileAsync(string, ReadingConfiguration?, CancellationToken) Reads a SyncTrack from a file asynchronously using multitasking. public static Task<SyncTrack> FromFileAsync(string path, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string Path of the file config ReadingConfiguration cancellationToken CancellationToken Token to request cancellation Returns Task<SyncTrack> ToFile(string, WritingConfiguration?) public void ToFile(string path, WritingConfiguration? config = null) Parameters path string config WritingConfiguration ToFileAsync(string, WritingConfiguration?, CancellationToken) public Task ToFileAsync(string path, WritingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters path string config WritingConfiguration cancellationToken CancellationToken Returns Task"
  },
  "api/ChartTools.Tempo.html": {
    "href": "api/ChartTools.Tempo.html",
    "title": "Class Tempo | ChartTools",
    "keywords": "Class Tempo Namespace ChartTools Assembly ChartTools.dll Marker that alters the tempo public class Tempo : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object Tempo Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Tempo, float) Constructors Tempo(TimeSpan, float) public Tempo(TimeSpan anchor, float value) Parameters anchor TimeSpan value float Tempo(uint, float) Creates an instance of Tempo. public Tempo(uint position, float value) Parameters position uint value float Properties Anchor Locks the tempo to a specific real-time position independent of the sync track. public TimeSpan? Anchor { get; set; } Property Value TimeSpan? Map Parent map the marker is contained public TempoMap? Map { get; } Property Value TempoMap Position Tick number on the track. public uint Position { get; set; } Property Value uint Remarks Only refer to the position if PositionSynced is true. PositionSynced Indicates if the tick position is up to date with Anchor. public bool PositionSynced { get; } Property Value bool Remarks true if the marker has no anchor. Value New tempo in beats per minute public float Value { get; set; } Property Value float"
  },
  "api/ChartTools.TempoMap.html": {
    "href": "api/ChartTools.TempoMap.html",
    "title": "Class TempoMap | ChartTools",
    "keywords": "Class TempoMap Namespace ChartTools Assembly ChartTools.dll Set of tempo markers that handles synchronism of anchored tempos. public class TempoMap : IList<Tempo>, ICollection<Tempo>, IEnumerable<Tempo>, IEnumerable Inheritance object TempoMap Implements IList<Tempo> ICollection<Tempo> IEnumerable<Tempo> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Optimizer.RemoveUneeded(TempoMap, uint, bool) PropertyMerger.Merge<T>(T, bool, bool, params T[]) CollectionExtensions.RemoveWhere<T>(ICollection<T>, Predicate<T>) Optimizer.RemoveUneeded(ICollection<Tempo>, bool) EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool) EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.NonNull<T>(IEnumerable<T?>) EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>) EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?) EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>) EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>) EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>) EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T) EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T) EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T) EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Unique<T>(IEnumerable<T>) CollectionExtensions.BinarySearchIndex<T, TKey>(IList<T>, TKey, Func<T, TKey>, out bool) EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult) Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. this[int] Gets or sets the element at the specified index. public Tempo this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value Tempo The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Synchronized Indicates if all anchored markers are synchronized. public bool Synchronized { get; } Property Value bool Methods Add(Tempo) Adds an item to the ICollection<T>. public void Add(Tempo item) Parameters item Tempo The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<Tempo>) public void AddRange(IEnumerable<Tempo> items) Parameters items IEnumerable<Tempo> Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Clear(bool) public void Clear(bool detachMap) Parameters detachMap bool Contains(Tempo) Determines whether the ICollection<T> contains a specific value. public bool Contains(Tempo item) Parameters item Tempo The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(Tempo[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(Tempo[] array, int arrayIndex) Parameters array Tempo[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Tempo> GetEnumerator() Returns IEnumerator<Tempo> An enumerator that can be used to iterate through the collection. IndexOf(Tempo) Determines the index of a specific item in the IList<T>. public int IndexOf(Tempo item) Parameters item Tempo The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Tempo) Inserts an item to the IList<T> at the specified index. public void Insert(int index, Tempo item) Parameters index int The zero-based index at which item should be inserted. item Tempo The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. InsertRange(int, IEnumerable<Tempo>) public void InsertRange(int index, IEnumerable<Tempo> items) Parameters index int items IEnumerable<Tempo> Remove(Tempo) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(Tempo item) Parameters item Tempo The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(Tempo, bool) public bool Remove(Tempo item, bool detachMap) Parameters item Tempo detachMap bool Returns bool RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. RemoveAt(int, bool) public void RemoveAt(int index, bool detachMap) Parameters index int detachMap bool Synchronize(uint, bool) Synchronizes anchored markers by calculating their tick position. public void Synchronize(uint resolution, bool desyncedPreOrdered = false) Parameters resolution uint desyncedPreOrdered bool Exceptions Exception"
  },
  "api/ChartTools.TimeSignature.html": {
    "href": "api/ChartTools.TimeSignature.html",
    "title": "Class TimeSignature | ChartTools",
    "keywords": "Class TimeSignature Namespace ChartTools Assembly ChartTools.dll Marker that alters the time signature public class TimeSignature : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object TimeSignature Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors TimeSignature(uint, byte, byte) Creates an instance of TimeSignature. public TimeSignature(uint position, byte numerator, byte denominator) Parameters position uint Value of Position numerator byte Value of Numerator denominator byte Value of Denominator Properties Denominator Beats per measure public byte Denominator { get; set; } Property Value byte Numerator Value of a beat public byte Numerator { get; set; } Property Value byte Position Tick number on the track. public uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution."
  },
  "api/ChartTools.Tools.LengthMerger.html": {
    "href": "api/ChartTools.Tools.LengthMerger.html",
    "title": "Class LengthMerger | ChartTools",
    "keywords": "Class LengthMerger Namespace ChartTools.Tools Assembly ChartTools.dll public static class LengthMerger Inheritance object LengthMerger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MergeLengths<T>(IEnumerable<T>, T?) public static T MergeLengths<T>(this IEnumerable<T> objects, T? target = null) where T : class, ILongTrackObject Parameters objects IEnumerable<T> target T Returns T Type Parameters T"
  },
  "api/ChartTools.Tools.Optimizer.html": {
    "href": "api/ChartTools.Tools.Optimizer.html",
    "title": "Class Optimizer | ChartTools",
    "keywords": "Class Optimizer Namespace ChartTools.Tools Assembly ChartTools.dll Provides methods for simplifying songs public static class Optimizer Inheritance object Optimizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CutLengths<T>(IEnumerable<T>, bool) Cuts short long track objects that exceed the start of the next one. public static void CutLengths<T>(this IEnumerable<T> objects, bool preOrdered = false) where T : ILongTrackObject Parameters objects IEnumerable<T> Set of long track objects preOrdered bool Skip ordering of objects by position Type Parameters T CutSpecialLengths<T>(IEnumerable<T>, bool) Cuts lengths of special phrases based on the numeric value of the type. public static List<T>[] CutSpecialLengths<T>(IEnumerable<T> phrases, bool preOrdered = false) where T : SpecialPhrase Parameters phrases IEnumerable<T> Set of phrases preOrdered bool Skip ordering of phrases by position Returns List<T>[] Passed phrases ordered by position and grouped by type Type Parameters T Exceptions InvalidOperationException CutSustains<T>(IEnumerable<T>, bool) Cuts short sustains that exceed the position of the next note preventing the sustain from continuing. public static void CutSustains<T>(this IEnumerable<T> chords, bool preOrdered = false) where T : LaneChord Parameters chords IEnumerable<T> Chords to cut the sustains of preOrdered bool Skip ordering of chords by position Type Parameters T RemoveUneeded(TempoMap, uint, bool) Removes redundant tempo markers by syncing the position of anchored markers. public static void RemoveUneeded(this TempoMap markers, uint resolution, bool desyncedPreOrdered = false) Parameters markers TempoMap Set of markers resolution uint Resolution from TrueResolution desyncedPreOrdered bool Skip ordering of desynced markers by position RemoveUneeded(ICollection<Tempo>, bool) Removes redundant tempo markers. public static void RemoveUneeded(this ICollection<Tempo> markers, bool preOrdered = false) Parameters markers ICollection<Tempo> Tempo markers without anchors. preOrdered bool Skip ordering of markers by position. Remarks If some markers may be anchored, use the overload with a resolution. Exceptions InvalidOperationException RemoveUnneeded(ICollection<TimeSignature>, bool) Removes redundant time signature markers. public static void RemoveUnneeded(this ICollection<TimeSignature> signatures, bool preOrdered = false) Parameters signatures ICollection<TimeSignature> Time signatures to remove the unneeded from preOrdered bool Skip ordering of markers by position"
  },
  "api/ChartTools.Tools.Printer.html": {
    "href": "api/ChartTools.Tools.Printer.html",
    "title": "Class Printer | ChartTools",
    "keywords": "Class Printer Namespace ChartTools.Tools Assembly ChartTools.dll public static class Printer Inheritance object Printer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PrintTrack(Track<StandardChord>) public static void PrintTrack(Track<StandardChord> track) Parameters track Track<StandardChord>"
  },
  "api/ChartTools.Tools.PropertyMerger.html": {
    "href": "api/ChartTools.Tools.PropertyMerger.html",
    "title": "Class PropertyMerger | ChartTools",
    "keywords": "Class PropertyMerger Namespace ChartTools.Tools Assembly ChartTools.dll Provides methods to merge properties between two instances public static class PropertyMerger Inheritance object PropertyMerger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Merge<T>(T, bool, bool, params T[]) Replaces the property values of an instance with the first non-null equivalent from other instances. public static void Merge<T>(this T current, bool overwriteNonNull, bool deepMerge, params T[] newValues) Parameters current T Item to assign the property values to overwriteNonNull bool If false, only replaces property values that are null in the original instance. deepMerge bool newValues T[] Items to pull new property values from in order of priority Type Parameters T Remarks If overwriteNonNull is false, only replaces property values that are null in the original instance."
  },
  "api/ChartTools.Tools.TempoRescaler.html": {
    "href": "api/ChartTools.Tools.TempoRescaler.html",
    "title": "Class TempoRescaler | ChartTools",
    "keywords": "Class TempoRescaler Namespace ChartTools.Tools Assembly ChartTools.dll public static class TempoRescaler Inheritance object TempoRescaler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Rescale(IChord, float) Rescales the position of a chord and sustain of its notes. public static void Rescale(this IChord chord, float scale) Parameters chord IChord Chord to rescale scale float Positive number where 1 is the current scale. Rescale(ILongObject, float) Rescales the length a long object. public static void Rescale(this ILongObject obj, float scale) Parameters obj ILongObject Object to rescale scale float Positive number where 1 is the current scale. Rescale(ILongTrackObject, float) Rescales the position and length of a long track object public static void Rescale(this ILongTrackObject trackObject, float scale) Parameters trackObject ILongTrackObject Object to rescale scale float Positive number where 1 is the current scale. Rescale(ITrackObject, float) Rescales the position of a track object public static void Rescale(this ITrackObject trackObject, float scale) Parameters trackObject ITrackObject Object to rescale scale float Positive number where 1 is the current scale. Rescale(Instrument, float) Rescales all tracks in an instrument. public static void Rescale(this Instrument instrument, float scale) Parameters instrument Instrument Source of the tracks scale float Positive number where 1 is the current scale. Rescale(Song, float) Rescales all instruments, tempo and time signatures. public static void Rescale(this Song song, float scale) Parameters song Song Source of objects scale float Positive number where 1 is the current scale. Rescale(SyncTrack, float) Rescales the tempo and time signatures in a song. public static void Rescale(this SyncTrack syncTrack, float scale) Parameters syncTrack SyncTrack Source of markers scale float Positive number where 1 is the current scale. Rescale(Tempo, float) Rescales the position and value of a tempo marker. public static void Rescale(this Tempo tempo, float scale) Parameters tempo Tempo Marker to rescale scale float Positive number where 1 is the current scale. Rescale(Track, float) Rescales the chords in a track. public static void Rescale(this Track track, float scale) Parameters track Track Source of chords scale float Positive number where 1 is the current scale."
  },
  "api/ChartTools.Tools.html": {
    "href": "api/ChartTools.Tools.html",
    "title": "Namespace ChartTools.Tools | ChartTools",
    "keywords": "Namespace ChartTools.Tools Classes LengthMerger Optimizer Provides methods for simplifying songs Printer PropertyMerger Provides methods to merge properties between two instances TempoRescaler"
  },
  "api/ChartTools.Track-1.html": {
    "href": "api/ChartTools.Track-1.html",
    "title": "Class Track<TChord> | ChartTools",
    "keywords": "Class Track<TChord> Namespace ChartTools Assembly ChartTools.dll Set of chords for a instrument at a certain difficulty public record Track<TChord> : Track, IEmptyVerifiable, IEquatable<Track>, IEquatable<Track<TChord>> where TChord : IChord Type Parameters TChord Inheritance object Track Track<TChord> Implements IEmptyVerifiable IEquatable<Track> IEquatable<Track<TChord>> Inherited Members Track.IsEmpty Track.Difficulty Track.LocalEvents Track.SpecialPhrases Track.FromFile(string, InstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules) Track.FromFileAsync(string, InstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules, CancellationToken) Track.FromFile(string, Difficulty, ReadingConfiguration, FormattingRules) Track.FromFileAsync(string, Difficulty, ReadingConfiguration, FormattingRules, CancellationToken) Track.FromFile(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules) Track.FromFileAsync(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules, CancellationToken) Track.FromFile(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules) Track.FromFileAsync(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration, FormattingRules, CancellationToken) Track.FromDirectory(string, InstrumentIdentity, Difficulty, ReadingConfiguration) Track.FromDirectoryAsync(string, InstrumentIdentity, Difficulty, ReadingConfiguration, CancellationToken) Track.FromDirectory(string, Difficulty, ReadingConfiguration) Track.FromDirectoryAsync(string, Difficulty, ReadingConfiguration, CancellationToken) Track.FromDirectory(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration) Track.FromDirectoryAsync(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration, CancellationToken) Track.FromDirectory(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration) Track.FromDirectoryAsync(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration, CancellationToken) Track.ToFile(string, WritingConfiguration, FormattingRules) Track.ToFileAsync(string, WritingConfiguration, FormattingRules, CancellationToken) Track.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TempoRescaler.Rescale(Track, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Chords Chords making up the difficulty track. public List<TChord> Chords { get; } Property Value List<TChord> ParentInstrument Instrument the track is held in. public Instrument<TChord>? ParentInstrument { get; init; } Property Value Instrument<TChord> Methods GetChords() Gets the chords as a read-only list of the base interface. protected override IReadOnlyList<IChord> GetChords() Returns IReadOnlyList<IChord> GetInstrument() Gets the parent instrument as an instance of the base type. protected override Instrument? GetInstrument() Returns Instrument"
  },
  "api/ChartTools.Track.html": {
    "href": "api/ChartTools.Track.html",
    "title": "Class Track | ChartTools",
    "keywords": "Class Track Namespace ChartTools Assembly ChartTools.dll Base class for tracks public abstract record Track : IEmptyVerifiable, IEquatable<Track> Inheritance object Track Implements IEmptyVerifiable IEquatable<Track> Derived Track<TChord> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) TempoRescaler.Rescale(Track, float) Properties Chords Groups of notes of the same position public IReadOnlyList<IChord> Chords { get; } Property Value IReadOnlyList<IChord> Difficulty Difficulty of the track public Difficulty Difficulty { get; init; } Property Value Difficulty IsEmpty true if containing no data public bool IsEmpty { get; } Property Value bool LocalEvents Events specific to the Track public List<LocalEvent> LocalEvents { get; } Property Value List<LocalEvent> ParentInstrument Instrument containing the track public Instrument? ParentInstrument { get; } Property Value Instrument SpecialPhrases Set of special phrases public List<TrackSpecialPhrase> SpecialPhrases { get; } Property Value List<TrackSpecialPhrase> Methods FromDirectory(string, Difficulty, ReadingConfiguration?) [Obsolete(\"Use ReadDrumsTrack with Formatting.\")] public static DirectoryResult<Track<DrumsChord>?> FromDirectory(string directory, Difficulty difficulty, ReadingConfiguration? config = null) Parameters directory string difficulty Difficulty config ReadingConfiguration Returns DirectoryResult<Track<DrumsChord>> FromDirectory(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration?) [Obsolete(\"Use ReadTrack with Formatting.\")] public static DirectoryResult<Track<GHLChord>?> FromDirectory(string directory, GHLInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null) Parameters directory string instrument GHLInstrumentIdentity difficulty Difficulty config ReadingConfiguration Returns DirectoryResult<Track<GHLChord>> FromDirectory(string, InstrumentIdentity, Difficulty, ReadingConfiguration?) [Obsolete(\"Use ReadTrack with Formatting.\")] public static DirectoryResult<Track?> FromDirectory(string directory, InstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null) Parameters directory string instrument InstrumentIdentity difficulty Difficulty config ReadingConfiguration Returns DirectoryResult<Track> FromDirectory(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration?) [Obsolete(\"Use ReadTrack with Formatting.\")] public static DirectoryResult<Track<StandardChord>?> FromDirectory(string directory, StandardInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null) Parameters directory string instrument StandardInstrumentIdentity difficulty Difficulty config ReadingConfiguration Returns DirectoryResult<Track<StandardChord>> FromDirectoryAsync(string, Difficulty, ReadingConfiguration?, CancellationToken) [Obsolete(\"Use ReadDrumsTrackAsync with Formatting.\")] public static Task<DirectoryResult<Track<DrumsChord>?>> FromDirectoryAsync(string directory, Difficulty difficulty, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters directory string difficulty Difficulty config ReadingConfiguration cancellationToken CancellationToken Returns Task<DirectoryResult<Track<DrumsChord>>> FromDirectoryAsync(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration?, CancellationToken) [Obsolete(\"Use ReadTrackAsync with Formatting.\")] public static Task<DirectoryResult<Track<GHLChord>?>> FromDirectoryAsync(string directory, GHLInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters directory string instrument GHLInstrumentIdentity difficulty Difficulty config ReadingConfiguration cancellationToken CancellationToken Returns Task<DirectoryResult<Track<GHLChord>>> FromDirectoryAsync(string, InstrumentIdentity, Difficulty, ReadingConfiguration?, CancellationToken) [Obsolete(\"Use ReadTrackAsync with Formatting.\")] public static Task<DirectoryResult<Track?>> FromDirectoryAsync(string directory, InstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters directory string instrument InstrumentIdentity difficulty Difficulty config ReadingConfiguration cancellationToken CancellationToken Returns Task<DirectoryResult<Track>> FromDirectoryAsync(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration?, CancellationToken) [Obsolete(\"Use ReadTrackAsync with Formatting.\")] public static Task<DirectoryResult<Track<StandardChord>?>> FromDirectoryAsync(string directory, StandardInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, CancellationToken cancellationToken = default) Parameters directory string instrument StandardInstrumentIdentity difficulty Difficulty config ReadingConfiguration cancellationToken CancellationToken Returns Task<DirectoryResult<Track<StandardChord>>> FromFile(string, Difficulty, ReadingConfiguration?, FormattingRules?) [Obsolete(\"Use ReadDrumsTrack.\")] public static Track<DrumsChord> FromFile(string path, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string difficulty Difficulty config ReadingConfiguration formatting FormattingRules Returns Track<DrumsChord> FromFile(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?) [Obsolete(\"Use ReadTrack.\")] public static Track<GHLChord> FromFile(string path, GHLInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument GHLInstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules Returns Track<GHLChord> FromFile(string, InstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?) [Obsolete(\"Use ReadTrack.\")] public static Track FromFile(string path, InstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument InstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules Returns Track FromFile(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?) [Obsolete(\"Use ReadTrack.\")] public static Track<StandardChord> FromFile(string path, StandardInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string instrument StandardInstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules Returns Track<StandardChord> FromFileAsync(string, Difficulty, ReadingConfiguration?, FormattingRules?, CancellationToken) [Obsolete(\"Use ReadDrumsTrackAsync.\")] public static Task<Track<DrumsChord>> FromFileAsync(string path, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string difficulty Difficulty config ReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<DrumsChord>> FromFileAsync(string, GHLInstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?, CancellationToken) [Obsolete(\"Use ReadTrackAsync.\")] public static Task<Track<GHLChord>> FromFileAsync(string path, GHLInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument GHLInstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<GHLChord>> FromFileAsync(string, InstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?, CancellationToken) [Obsolete(\"Use ReadTrackAsync.\")] public static Task<Track> FromFileAsync(string path, InstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument InstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track> FromFileAsync(string, StandardInstrumentIdentity, Difficulty, ReadingConfiguration?, FormattingRules?, CancellationToken) [Obsolete(\"Use ReadTrackAsync.\")] public static Task<Track<StandardChord>> FromFileAsync(string path, StandardInstrumentIdentity instrument, Difficulty difficulty, ReadingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string instrument StandardInstrumentIdentity difficulty Difficulty config ReadingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task<Track<StandardChord>> GetChords() protected abstract IReadOnlyList<IChord> GetChords() Returns IReadOnlyList<IChord> GetInstrument() protected abstract Instrument? GetInstrument() Returns Instrument ToFile(string, WritingConfiguration?, FormattingRules?) [Obsolete(\"Use ReplaceTrack.\")] public void ToFile(string path, WritingConfiguration? config = null, FormattingRules? formatting = null) Parameters path string config WritingConfiguration formatting FormattingRules ToFileAsync(string, WritingConfiguration?, FormattingRules?, CancellationToken) [Obsolete(\"Use ReplaceTrackAsync.\")] public Task ToFileAsync(string path, WritingConfiguration? config = null, FormattingRules? formatting = null, CancellationToken cancellationToken = default) Parameters path string config WritingConfiguration formatting FormattingRules cancellationToken CancellationToken Returns Task ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ChartTools.TrackObjectBase.html": {
    "href": "api/ChartTools.TrackObjectBase.html",
    "title": "Class TrackObjectBase | ChartTools",
    "keywords": "Class TrackObjectBase Namespace ChartTools Assembly ChartTools.dll public abstract class TrackObjectBase : ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject> Inheritance object TrackObjectBase Implements ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> Derived Phrase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors TrackObjectBase() public TrackObjectBase() TrackObjectBase(uint) protected TrackObjectBase(uint position) Parameters position uint Properties Position Tick number on the track. public virtual uint Position { get; set; } Property Value uint Remarks A tick represents a subdivision of a beat. The number of subdivisions per beat is stored in Resolution."
  },
  "api/ChartTools.TrackSpecialPhrase.html": {
    "href": "api/ChartTools.TrackSpecialPhrase.html",
    "title": "Class TrackSpecialPhrase | ChartTools",
    "keywords": "Class TrackSpecialPhrase Namespace ChartTools Assembly ChartTools.dll Phrase related to a track that triggers an in-game event. public class TrackSpecialPhrase : SpecialPhrase, ILongTrackObject, ITrackObject, IReadOnlyTrackObject, IEquatable<IReadOnlyTrackObject>, ILongObject, IReadOnlyLongObject Inheritance object SpecialPhrase TrackSpecialPhrase Implements ILongTrackObject ITrackObject IReadOnlyTrackObject IEquatable<IReadOnlyTrackObject> ILongObject IReadOnlyLongObject Inherited Members SpecialPhrase.Position SpecialPhrase.TypeCode SpecialPhrase.Length object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TempoRescaler.Rescale(ILongObject, float) TempoRescaler.Rescale(ILongTrackObject, float) TempoRescaler.Rescale(ITrackObject, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors TrackSpecialPhrase(uint, TrackSpecialPhraseType, uint) Creates an instance of TrackSpecialPhrase. public TrackSpecialPhrase(uint position, TrackSpecialPhraseType type, uint length = 0) Parameters position uint Position of the phrase type TrackSpecialPhraseType Effect of the phrase length uint Duration in ticks TrackSpecialPhrase(uint, byte, uint) Creates an instance of TrackSpecialPhrase. Base constructor of special phrases. public TrackSpecialPhrase(uint position, byte typeCode, uint length = 0) Parameters position uint Position of the phrase typeCode byte Effect of the phrase length uint Duration in ticks Properties IsFaceOff public bool IsFaceOff { get; } Property Value bool Type Type of the phrase that drives the gameplay effect public TrackSpecialPhraseType Type { get; set; } Property Value TrackSpecialPhraseType Methods Equals(TrackSpecialPhrase?) public bool Equals(TrackSpecialPhrase? other) Parameters other TrackSpecialPhrase Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/ChartTools.TrackSpecialPhraseType.html": {
    "href": "api/ChartTools.TrackSpecialPhraseType.html",
    "title": "Enum TrackSpecialPhraseType | ChartTools",
    "keywords": "Enum TrackSpecialPhraseType Namespace ChartTools Assembly ChartTools.dll Types of TrackSpecialPhrase public enum TrackSpecialPhraseType : byte Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Fields DrumsDoubleRoll = 66 DrumsRoll = 65 Player1FaceOff = 3 Player2FaceOff = 4 StarPowerActivation = 2 Allows the activation of star power StarPowerGain = 1 Grants star power if all notes are hit Tremolo = 6 Trill = 5 Unknown = 0 The Type is not a recognized phrase type"
  },
  "api/ChartTools.UndefinedEnumException.html": {
    "href": "api/ChartTools.UndefinedEnumException.html",
    "title": "Class UndefinedEnumException | ChartTools",
    "keywords": "Class UndefinedEnumException Namespace ChartTools Assembly ChartTools.dll Exception thrown when using an Enum value that is not defined public class UndefinedEnumException : ArgumentException, ISerializable Inheritance object Exception SystemException ArgumentException UndefinedEnumException Implements ISerializable Inherited Members ArgumentException.ThrowIfNullOrEmpty(string, string) ArgumentException.ThrowIfNullOrWhiteSpace(string, string) ArgumentException.Message ArgumentException.ParamName Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Constructors UndefinedEnumException(Enum) Exception thrown when using an Enum value that is not defined public UndefinedEnumException(Enum value) Parameters value Enum Properties Value Value used public Enum Value { get; } Property Value Enum"
  },
  "api/ChartTools.UnidentifiedMetadata.html": {
    "href": "api/ChartTools.UnidentifiedMetadata.html",
    "title": "Struct UnidentifiedMetadata | ChartTools",
    "keywords": "Struct UnidentifiedMetadata Namespace ChartTools Assembly ChartTools.dll public struct UnidentifiedMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods PropertyMerger.Merge<T>(T, bool, bool, params T[]) Properties Key public string Key { readonly get; init; } Property Value string Origin public FileType Origin { readonly get; set; } Property Value FileType Value public string? Value { readonly get; set; } Property Value string"
  },
  "api/ChartTools.Vocals.html": {
    "href": "api/ChartTools.Vocals.html",
    "title": "Class Vocals | ChartTools",
    "keywords": "Class Vocals Namespace ChartTools Assembly ChartTools.dll public record Vocals : Instrument<Phrase>, IEmptyVerifiable, IEquatable<Instrument>, IEquatable<Instrument<Phrase>>, IEquatable<Vocals> Inheritance object Instrument Instrument<Phrase> Vocals Implements IEmptyVerifiable IEquatable<Instrument> IEquatable<Instrument<Phrase>> IEquatable<Vocals> Inherited Members Instrument<Phrase>.Easy Instrument<Phrase>.Medium Instrument<Phrase>.Hard Instrument<Phrase>.Expert Instrument<Phrase>.GetTrack(Difficulty) Instrument<Phrase>.CreateTrack(Difficulty) Instrument<Phrase>.RemoveTrack(Difficulty) Instrument<Phrase>.GetEasy() Instrument<Phrase>.GetMedium() Instrument<Phrase>.GetHard() Instrument<Phrase>.GetExpert() Instrument<Phrase>.GetTracks() Instrument<Phrase>.GetExistingTracks() Instrument<Phrase>.SetTrack(Track<Phrase>) Instrument.IsEmpty Instrument.InstrumentIdentity Instrument.InstrumentType Instrument.SpecialPhrases Instrument.GetDifficulty(InstrumentDifficultySet) Instrument.SetDifficulty(InstrumentDifficultySet, sbyte?) Instrument.ShareLocalEvents(TrackObjectSource) Instrument.ShareSpecial(TrackObjectSource) Instrument.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TempoRescaler.Rescale(Instrument, float) PropertyMerger.Merge<T>(T, bool, bool, params T[]) Methods GetIdentity() protected override InstrumentIdentity GetIdentity() Returns InstrumentIdentity"
  },
  "api/ChartTools.html": {
    "href": "api/ChartTools.html",
    "title": "Namespace ChartTools | ChartTools",
    "keywords": "Namespace ChartTools Classes Charter Creator of the chart DesynchronizedAnchorException Exception thrown when an invalid operation is performed on a desynchronized anchored Tempo. Drums DrumsChord Set of notes played simultaneously by drums DrumsNote Note played by drums GHLChord Set of notes played simultaneously by a Guitar Hero Live instrument GHLInstrument Instrument Base class for instruments InstrumentDifficultySet Stores the estimated difficulties for instruments InstrumentSet Set of all instruments InstrumentSpecialPhrase Phrase related to an instrument that triggers an in-game event. Instrument<TChord> Set of tracks common to an instrument LaneChord LaneChord<TNote, TLane, TModifiers> LaneNote LaneNoteCollection<TNote, TLane> LaneNote<TLane> Base class for notes Metadata Set of miscellaneous information about a Song Song Song playable in Clone Hero SpecialPhrase Base class for phrases that define an in-game event with a duration such as star power. StandardChord Set of notes played simultaneously by a standard five-fret instrument StandardInstrument StreamCollection Set of audio files to play and mute during gameplay SyncTrack Set of markers that define the time signature and tempo Tempo Marker that alters the tempo TempoMap Set of tempo markers that handles synchronism of anchored tempos. TimeSignature Marker that alters the time signature Track Base class for tracks TrackObjectBase TrackSpecialPhrase Phrase related to a track that triggers an in-game event. Track<TChord> Set of chords for a instrument at a certain difficulty UndefinedEnumException Exception thrown when using an Enum value that is not defined Vocals Structs UnidentifiedMetadata Interfaces IChord Set of notes tied together. IEmptyVerifiable Adds support for a property defining if an object is empty ILongObject ILongTrackObject INote IReadOnlyLongObject IReadOnlyTrackObject Object located on a track ITrackObject Object located on a track Enums Difficulty Difficulty levels DrumsChordModifiers Modifier that affects the way the chord can be played DrumsLane Drums pads and pedals for a DrumsNote FileType GHLChordModifiers Modifier that affects how a GHLChord can be played GHLInstrumentIdentity Guitar Hero Live instruments GHLLane Frets for a GHL note InstrumentIdentity All instruments InstrumentSpecialPhraseType Types of InstrumentSpecialPhrase InstrumentType MidiInstrumentOrigin Origins of an instrument StandardChordModifiers Modifier that affects how a StandardChord can be played StandardInstrumentIdentity Standard five-fret instruments StandardLane Frets for a standard note TrackSpecialPhraseType Types of TrackSpecialPhrase"
  },
  "articles/configuration.html": {
    "href": "articles/configuration.html",
    "title": "Configuration | ChartTools",
    "keywords": "Configuration Nothing to see here for now :("
  },
  "articles/dynamic-syntax.html": {
    "href": "articles/dynamic-syntax.html",
    "title": "Dynamic Syntax | ChartTools",
    "keywords": "Dynamic Syntax This guide will cover an alternate and more flexible syntax for accessing components. Using the dynamic syntax ChartTools supports a dynamic syntax to retrieve instruments and tracks using identity enums instead of explicit properties. StandardInstrument guitar = song.Instruments.Get(StandardInstrumentIdentity.LeadGuitar); Instrument bass = song.Instruments.Get(InstrumentIdentity.Bass); Track<StandardChord> easyGuitar = guitar.GetTrack(Difficulty.Easy); Track easyBass = bass.GetTrack(Difficulty.Easy); The dynamic syntax uses three enums to get instruments: StandardInstrumentIdentity - Instruments using standard chords GHLInstrumentIdentity - Instruments using Guitar Hero Live chords InstrumentIdentity - All instruments including drums and vocals Drums and vocals do not have an enum for their chord types as they are the only instrument using their respective chords. Generic vs. non-generic When an instrument is obtained dynamically using the InstrumentIdentity enum, the returned object is of type Instrument. When a track is obtained from a non-generic instrument, either dynamically or explicitly through a property, the track will be of type Track. This concept extends to chords and notes. When working with a non-generic track, the following rules apply: Chords cannot be added or removed. The position of existing chords can be modified. Local events and special phrases have no restrictions. A note's identity can be obtained through the read-only Index property. Being the base types of the generic counterparts, non-generic instruments, tracks, chords and notes can be cast to a generic version. The dynamic syntax can also be used to set and read instruments and tracks. // Setting components song.Instruments.Set(guitar); song.Instruments.Set(guitar with { InstrumentIdentity = InstrumentIdentity.Bass }); song.Instruments.LeadGuitar.SetTrack(new() { Difficulty = Difficulty.Easy }); // Reading components StandardInstrument coop = StandardInstrument.FromFile(path, StandardInstrumentIdentity.CoopGuitar, <ReadingConfiguration>, metadata.Formatting); Instrument keys = Instrument.FromFile(path, InstrumentIdentity.Keys, <ReadingConfiguration>, metadata.Formatting); Track<StandardChord> easyCoop = Track.FromFile(path, StandardInstrumentIdentity.CoopGuitar, Difficulty.Easy, <ReadingConfiguration>, metadata.Formatting); Track easyKeys = Track.FromFile(path, InsturmentIdentity.Keys, Difficulty.Easy, <ReadingConfiguration>, metadata.Formatting); When setting an instrument, the target is determined by the InstrumentIdentity property of the new instrument, which can be overridden using a with statement. Similarly, the target difficulty when setting a track is determined by the track's Difficulty property, also overridable through with. NOTE: Unlike when setting an instrument explicitely, the existing identity is used when setting dynamically. This makes it safe to reuse the previous reference after the assignement unless a with statement is used. Tracks still need to be re-obtained when using the dynamic syntax as a copy is created to assign its ParentInstrument. In cases where a reference to an instrument or track needs to be re-obtained, this reference is passed through as the return of InstrumentSet.Set and Instrument.SetTrack."
  },
  "articles/events.html": {
    "href": "articles/events.html",
    "title": "Events | ChartTools",
    "keywords": "Events Events are track objects with custom data that drive various elements of gameplay. This guide will cover how to use events as well as the helpers provided by ChartTools. Class structure Events are stored using Event as a base class, containing the position, event type and an optional argument. The type and argument can also be set simultaneously through the EventData property. ChartTools distinguishes between global events (stored under Song) and local events (stored under Track) using the respective GlobalEvent and LocalEvent classes, both deriving from Event. This allows for better type safety and for the classes to provide helper properties for some complex event types. Event helpers Event types and arguments are stored as string, allowing for future-proofing and supporting custom events from sources that are not officially supported. For event types which are supported, CharTools provides helpers in the form of string constants under the static EventTypeHelper.Global and EventTypeHelper.Local classes. In a future version, usage details of helpers will be accessible from the documentation included with the assembly. var globalEvent = new GlobalEvent(0, EventTypeHelper.Global.MusicStart, null); Some event types are part of a category defined by a prefix to the type. Helpers are provided for these groups under the static EventTypeHeaderHelper class. Helper properties are also defined for groups from supported sources. bool isCrowd = globalEvent.EventType.StartsWith(EventTypeHeaderHelper.Global.Crowd); bool isCrowd2 = globalEvent.IsCrowdEvent; Some event types can be modified using predefined arguments. For such values, helpers are provided under the static EventArgumentHelper class. var globalEvent = new GlobalEvent(0, EventTypeHelper.Global.Lighting, EventArgumentHelper.Global.Lighting.Strobe);"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | ChartTools",
    "keywords": "Getting Started This document goes over the basics of parsing a chart through ChartTools. Installation To add ChartTools to your project, you must first build the ChartTools project. Once built, the library can be found under ChartTools\\bin\\[Debug]|[Release]\\.net8.0 Visual Studio: Right-click on your project from the solution explorer and select \"Add Project References...\". Click on \"Browse\" and select ChartTools.dll that was generated. If the dll file is moved, also move ChartTools.xml to the new directory for XML documentation. Supported file formats ChartTools supports the parsing of .chart and .ini files, with .mid parsing in the works. Unless written as .chart, the term \"chart\" refers to songs supported by ChartTools regardless of the file format. For documentation on the formats themselves, refer to the GuitarGame_ChartFormats repository. Working with charts Song Every component of a chart is stored in an instance of the Song class. It can be initialized by reading a file that will be parsed based on the extension. Song song = Song.FromFile(path); A configuration object may also be used to customize the error handling behavior. Learn more about configuring IO operations. Song song = Song.FromFile(path, new ReadingConfiguration()); Note: Some Midi files may contain formatting information in the song.ini file. In order to account for custom formatting when reading, it is recommended to read from a directory instead. Song song = Song.FromDirectory(path, <ReadingConfiguration>); When reading from a directory, the metadata will be read from song.ini, followed by the rest from notes.chart. A song contains four main components: Metadata - Miscellaneous info about the song, such as title, album, charter etc. Sync track - Markers that define time signature and tempo Global events - Events that are not tied to an instrument Instruments - The instrument track data Metadata Similar to reading a song, metadata is retrieved by reading a file: Metadata metadata = Metadata.FromFile(path); Metadata can be read from either .chart or .ini. Given that most modern charts are made for Clone Hero, it is recommended that you prioritize .ini over .chart metadata, as that will usually be the more accurate metadata. Metadata can also be retrieved from multiple files at once. Metadata metadata = Metadata.FromFiles(path1, path2, path3...); When reading from multiple files, you can mix file types, and the priority of information is defined by the order of the files. As a future-proofing method, all unsupported items can be found under UnidentifiedData. This data will only be written to the same file format as the one it was read from. Instruments and Tracks All instruments currently supported are represented using the generic Instrument class. This class contains an object of type Track class for every difficulty. A track can be retrieved from a song with the following code: Track<StandardChord> track = song.Instruments.LeadGuitar.Expert; Notice the use of StandardChord as a generic type. Instruments are divided into four categories based on the type of chords they use. These categories are: Standard - Five colored notes Drums - Five colored with support for double kick and cymbal flags GHL (Guitar Hero Live) - Three black and three white notes Vocals - Notes with an associated syllable. Notes have positions defined as offsets from the phrase. Learn more about vocals. A track is composed of three components: Chords (defined by the generic type) Special phrases (star power) Local events NOTE: When setting an instrument in an InstrumentSet or a track in an instrument, a copy of the object is created that contains information about its identity. In order to have changes made to the object after the assignment be reflected, a reference must be re-obtained from the parent. Instruments can also be obtained dynamically from a song, regardless of the type. Learn more about the dynamic syntax. Chords and Notes A chord is a set of notes played at the same time. For readability, most chords and notes have specific classes for each instrument type, deriving from LaneChord<TNote, TLane, TModifiers> and LaneNode<TLane>. The following adds an orange note to every chord on a track: foreach (StandardChord chord in song.Instruments.LeadGuitar.Expert) { chord.Notes.Add(StandardLane.Orange); // or chord.Notes.Add(new Note<StandardLane>(StandardLane.Orange)); } Unlike other instrument, Vocals contain Phrases and Syllables. Although bound to chords and notes in the backend, syllables in a phrase are not all at the same position, instead storing their positions as offsets from their parent. Learn more about vocals. Optimizing Although still functional, some files may contain data that slows down the reading process or, in worse cases, may result in non-functional files when saved in certain formats. ChartTools provides various utilities to fix such issues. using ChartTools.Optimization; chords.CutSustains() // Cuts short sustains go past what is applicable in-game. specialPhrases.CutSpecialLenghts.CutLengths() // Cuts short special phrases that exceed the start of the next phrase based on type. // Sorts and removes redundant markers syncTrack.Tempo.RemoveUnneeded(); syncTrack.TimeSignatures.RemoveUnneeded(); ChartTools includes other utilities for various purposes. Learn more. Writing files Finally, changes can be saved to a file using Song.ToFile, with the format determined by the file extension. song.ToFile(\"output.chart\", <WritingConfiguration>); Due to limitations of certain file formats, only Song objects can be written to a file in this manner. Format-specific operations can be accessed through the respective static class, such as ChartFile for .chart. For example, here is how to replace an instrument in a .chart file. ChartFile.ReplaceInstrument(\"output.chart\", guitar, <WritingConfiguration>); Like when reading files, writing operations can be configured to alter how they deal with errors. Learn more about configuring IO operations."
  },
  "articles/improving-performance.html": {
    "href": "articles/improving-performance.html",
    "title": "Improving Performance | ChartTools",
    "keywords": "Improving Performance This guide will cover alternate techniques that will improve performance when using ChartTools. Configuration By default, IO operations make multiple integrity checks to resolve errors. These checks can be configured or skipped by using a Readingconfiguration or WritingConfiguration object. Learn more about configuring IO operations. Song song = Song.FromDirectory(directory, new ReadingConfiguration { DuplicateTrackObjectPolicy = DuplicateTrackObjectPolicy.IncludeAll }); Targeted formats By default, the target format of an IO operation is determined by the file extension. You can bypass the extension check by using the file classes located in ChartTools.IO. Song song = ChartFile.ReadSong(path); Metadata metadata = IniFile.ReadMetadata(path); When writing to a specific format, the configuration object used is specific for that format and can be found as a property of the format-independent configuration, such as ReadingConfiguration.Chart. Single components Rather than performing IO operation on entire songs, such operations can be made on individual components. When writing a component to an existing file, the parts of the file regarding the component will be modified. Metadata metadata = Metadata.FromFile(path); StandardInstrument guitar = ChartFile.ReadInstrument(path, <WritingConfiguration>, metadata.Formatting); NOTE: Due to complications with implementing Midi support, operations on single instruments and tracks through their respective class have been deprecated. These operations must now be performed through the respective format class such as ChartFile. Asynchronous operations Every IO operation can be performed asynchronously by appending Async to the name of a method. Task<Song> readTask = Song.FromDirectoryAsync(directory); Asynchronous operations support a CancellationToken as an optional parameter. If omitted. CancellationToken.None will be used. Writing operations make use of a temporary file and can be safely canceled without file corruption. Task<Song> readTask = Song.FromDirectoryAsync(directory, <ReadingConfiguration>, <CancellationToken>); The asynchronous operations make heavy use of multi-threading and are beneficial even if the result is to be awaited immediately."
  },
  "articles/lyrics.html": {
    "href": "articles/lyrics.html",
    "title": "Lyrics | ChartTools",
    "keywords": "Lyrics Lyrics of a song are defined by the Vocals instrument in which chords are phrases and notes as syllables. Unlike with lane chords which are defined by notes at the same position, syllables in phrases are consecutive and arbitrarily grouped into phrases. Lyric classes are defined under the ChartTools.Lyrics namespace. Although Clone Hero does not support vocals as an instrument and typically stores lyric data as global events, the ChartTools.Lyrics namespace provides a more rigorous API for editing lyrics. ChartTools also provides methods to convert between global events and vocals. Clone Hero also uses vocals to read lyrics from legacy songs. Syllables Syllables define a start and end position in the form of offsets from the start position of the parent phrase. This allows for phrases to be moved by changing their position without having to update the position of each syllable. The note index of syllables represents a vocal pitch from the range C2 to C6 using the VocalPitchValue, stored under the VocalPitch helper struct. The enum uses a binary representation to isolate keys and octaves while staying true to music theory with comparing values. The following code creates a syllable with the pitch of D3. Phrase phrase = song.Instruments.Vocals.Expect.Phrases; phrase.Syllables.Add(new Syllable(0, new VocalsPitch(3 << 4 | VocalsPitch.D)); Vocals also store lyric text to appear in-game. The text for each phrase is divided between the syllables to define the timings of the karaoke system. Clone Hero defines special characters such as dashes for multi-syllable words that don't appear in-game. The raw text with special characters can be access through the RawText property while DisplayedText processes the special characters and returns the syllable text as it appears in-game. NOTE: Clone Hero also supports color data in the text. This is currently not supported in ChartTools and special characters related to color data will appear as part of DisplayedText. Phrases Unlike other chords, phrases define a length and end position in addition to a start position. The end position is driven by the end of the last syllable but can be replaced by setting the LengthOverride property. Phrases also define RawText and DisplayedText properties which combine the text from their syllables. Reading and writing vocals Chart files define lyrics through global events that can be converted to a set of phrases. When reading a full song from a chart file, the vocals instrument will be null. To benefit of the more advanced lyrics API, a dummy set of phrases instrument can be generated using the GetLyrics extension method. using ChartTools.Lyrics; IEnumerable<Phrase> lyrics = song.GlobalEvents.GetLyrics(); To be written to a chart file, lyrics must be converted back into global events. using ChartTools.Lyrics; lyrics.ToGlobalEvents(); // Creates a new set of global events events.SetLyrics(lyrics); // Replaces existing lyric-related events with new events making up the phrases"
  },
  "articles/tools.html": {
    "href": "articles/tools.html",
    "title": "Tools | ChartTools",
    "keywords": "Tools ChartTools includes multiple utility methods for performing common operations on charts. This guide will cover such utilities. Fun fact: The name ChartTools comes from the original purpose of the library of only providing utility methods for charts. Accessing utilities To start using utilities, add the ChartTools.Tools namespace to your usings. Once added, utilities can be called from their respective static class or as extension methods. using ChartTools.Tools; AwesomeUtility.AwesomeUtility(song); song.AwesomeUtility(); Merging lengths Some track objects define a length, such as special phrases and vocal phrases. LengthMerger takes a set of such objects and sets the first object in the sequence to cover the entire duration from the start position of the earliest object to the end position of the last. // T is the type of objects in the collection. T modified = LengthMerger.MergeLengths<T>(longTrackObjects); The object to modify can be changed by providing it as a target. target = LengthMerger.MergeLengths<T>(longTrackObjects, target); If a sequence has an object covering positions 10-20 and another covering 22-30, the resulting object will have a start position of 10 and end position of 30. Cutting lengths and sustains In some cases, tracks may be in a broken state where objects define lengths going part the start of the next matching objects. The Optimizer class provides methods for fixing such overlaps by cutting short lengths going past the start of certain objects. This process involves ordering the objects by position, the result of which is provided as a return value. If the objects are known to already be in order, the ordering can be skipped with an optional parameter. Cutting sustains List<StandardChord> ordered = Optimizer.CutSustains<StandardChord>(guitarChords, <skipOrdering>); Supports all chord types and simulates where sustains are forced to end due to another note of the same index or the presence of an open note and vice versa. Syllables are not modified, which may result in them falling outside the end position of the parent phrase. Part of the process of finding how to cut sustain involves ordering chords by position. The result of the ordering is provided as a return value. Cutting special phrases List<TrackSpecialPhrase>[] orderedGroups = Optimizer.CutSpecialLenghts<TrackSpecialPhrase>(phrases, <skipOrdering>); Groups phrases by special type before applying the cutting to each group individually. The grouping and ordering by position is provided as the return value, where each item in the array stores phrases of the same type. NOTE: Due to the grouping being based on the numeric value of the special type, only collections of instruments and track special phrases are supported. Using an IEnumerable<SpecialPhrase> will result in an exception. Cutting other long track objects When the type of long objects is not known, a base method using the ILongTrackObject interface can be used. This method only applies the base logic, treating each object equally compared to how note sustains and special phrase lengths which are grouped by their respective methods, returning the objects ordered by length. List<ILongTrackObject> oredredObjects = Optimizer.CutLenghts<ILongTrackObject>(objects, <skipOrdering>); Removing redundant sync track markers The Optimizer class provides methods for removing tempo and time signature markers that have no effect on gameplay. Like with length cutting, the objects are ordered by position and provided as a return value. The ordering can also be skipped with an optional parameter. List<TimeSignature> orderedSignatures = Optimizer.RemoveUneeded(tempoMarkers, <skipOrdering>); List<Tempo> orderedTempos = Optimizer.RemoveUneeded(timeSignatures, <skipOrdering>); Anchored tempos The method for removing tempo markers cannot work with anchored markers for which the tempo position is desynchronized and will throw an exception. An overload is provided which calculates the tick positions for such markers. This overload requires the temporal resolution obtained from the song's formatting. The optional parameter for skipping the ordering only applies to the ordering of synchronized markers. List<Tempo> orderedMarkers = Optimizer.RemoveUneeded(tempoMap, resolution, <skipSyncedOrdering>); Tempo rescaling The TempoRescaler class provides scaling methods for various groups of track objects. TempoRescaler.Rescale(longObject, scale); TempoRescaler.Rescale(trackObject, scale); TempoRescaler.Rescale(longTrackObject, scale) TempoRescaler.Rescale(tempo, scale); TempoRescaler.Rescale(chord, scale); TempoRescaler.Rescale(track, scale); TempoRescaler.Rescale(instrument, scale); TempoRescaler.Rescale(syncTrack, scale); TempoRescaler.Rescale(song, scale);"
  },
  "index.html": {
    "href": "index.html",
    "title": "ChartTools | ChartTools",
    "keywords": "ChartTools ChartTools is a .NET 8 library with the purpose of modeling song files for plastic guitar video games like Guitar Hero, Rock Band and Clone Hero. It currently supports reading of .chart and .ini files, with .mid support currently in development. If you find any bugs, you can report them in the Issues section of the repository. Make sure to use the \"bug\" label. Getting Started For an overview on installation and taking your first steps with ChartTools, see Articles. A GitHub Pages website is available with detailed articles and API documentation. Contributing If you like to contribute to the development of ChartTools, feel free to comment on an issue, submit a pull request or submit your own issues. To test your code, create a project named Debug and it will be automatically excluded from commits. Documentation The solution includes a Docs project that can be executed to build and deploy locally on port 8080. Remember to terminate the local server with Ctrl+C before closing as it can prevent later executions from using the port. If this occurs, run netstat -aof | findstr :8080 taskkill /f /pid <PID> where PID is the right-most ID in the output of netstat. License and Attribution This project is licensed under the GNU General Public License 3.0. See LICENSE for details. This project makes use of one or more third-party libraries to aid in functionality, see attribution.txt for details. Special Thanks FireFox for making the Moonscraper editor open-source TheNathannator for their direct contributions. Matthew Sitton, lead developer of Clone Hero for sharing their in-depth knowledge and general programming wisdom. Members of the Clone Hero Discord and Moonscraper Discord, including but not limited to DarkAngel2096, drumbs (TheNathannator), FireFox, Kanske, mdsitton, Spachi, and XEntombmentX for their help in researching."
  }
}